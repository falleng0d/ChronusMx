//|-------------------------------|
// Thu Apr 25 2019 12:02:29
// Script generated by GPC BLOCKLY
//|-------------------------------|

// UTILITIES
define FORWARD = -40;
define BACKWARD = 40;
define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;
define true = TRUE;
define false = FALSE;

// REMAPS
define BTN_START = XB1_B;
define PRESS_SELECT = XB1_A;//XB1_PR2;
define PRESS_START = XB1_B;//XB1_PR1;
define PRESS_HOME = XB1_PL1;
define PRESS_RT = XB1_PL2;
define PRESS_ATACK = XB1_RB;
define PRESS_DEFEND = XB1_LB;
define PRESS_Y = XB1_Y;

define GET_RT = XB1_RT;
define GET_SELECT = XB1_VIEW;
define GET_START = XB1_MENU;
define GET_HOME = XB1_XBOX;
define GET_ATACK = XB1_RB;
define GET_DEFEND = XB1_LB;
define GET_Y = XB1_Y;

// AUTO ATACK XB1_B
define BTN_AUTO_ATACK_TMP_1 = TRACE_1;
int tapExpire, isAutoAtacking, taps, t, t2, isSniping

int defTapExpire, isAutoDefending, defTaps, defT, defT2, defIsSniping
define BTN_AUTO_DEFEND_TMP_1 = XB1_PR1;

int py_TapExpire, is_py, py_Taps, py_T, py_T2, py_IsSniping;

int isPr1PressEvent, isPr1ReleaseEvent, pr1LastValue;
int isPr2PressEvent, isPr2ReleaseEvent, pr2LastValue;

// OTHERS
int walkDirectionY, isAutoWalkingY;
int doStart, doSelect, doHome, blockRTPressCombo;

int isHoldingY, isComboRelease;	

int isLTPressEvent, ignoreNextLT;

/*remap XB1_MENU -> XB1_B;
remap XB1_B -> XB1_MENU;*/

unmap XB1_XBOX;
// remap XB1_PL1 -> XB1_XBOX;

remap PS3_START -> PRESS_START;
// remap XB1_PR2 -> PS3_START;
remap PRESS_START -> PS3_START;

remap PS3_SELECT -> PRESS_SELECT;
// remap XB1_PL1 -> PS3_SELECT;
remap PRESS_SELECT -> PS3_SELECT;

remap XB1_RT -> XB1_PL2;
remap XB1_PL2 -> XB1_RT;

/*remap XB1_VIEW -> XB1_A;
remap XB1_A -> XB1_VIEW;*/
//remap PS3_R1 -> PS3_R2;

init {}

main {	
	set_val(XB1_RX, useDeadzone(XB1_RX, 5))
	set_val(XB1_RY, useDeadzone(XB1_RY, 10))
	set_val(XB1_LX, useDeadzone(XB1_LX, 22))
	set_val(XB1_LY, useDeadzone(XB1_LY, 10))
	if(get_val(XB1_LB)) set_val(XB1_LB, 100);
	if(get_val(PS3_L2)) set_val(PS3_L2, 100);
	if(get_val(PS3_R1)) set_val(PS3_R1, 100);
	if(get_val(PS3_R2)) set_val(PS3_R2, 100);

	// Rapid Look Arroud
	if(get_val(PS3_LY) > 40) {
		set_val(PS3_LY, 100)
	} else if(get_val(PS3_LY) < -40) {
		set_val(PS3_LY, -100)
	}
	if(get_val(PS3_LX) > 40) {
		set_val(PS3_LX, 100)
	} else if(get_val(PS3_LX) < -40) {
		set_val(PS3_LX, -100)
	}

	// LR ->
	// 	Double tap: Undraft (LR)
	// 	Single tap: Target Lock (PRESS_SELECT)
	// if (get_val(XB1_Y) > 0) {
	// 	set_val(XB1_Y, 0)
	// 	set_val(PRESS_SELECT, 100)
	// }
	// isLTPressEvent = event_release(XB1_LT)
	// if(pressOnDoublePress(300, isLTPressEvent)) {
	// 	combo_run(press_lt)
	// 	is_py = FALSE;
	// 	py_Taps = 0;
	// 	ignoreNextLT = TRUE
	// } else {
	// 	if(!ignoreNextLT) {
	// 		if(isLTPressEvent) combo_run(press_target_lock)
	// 		set_val(XB1_LT, 0)
	// 	} else { ignoreNextLT = FALSE }
	// }

	// Auto Atack
	if(toggleAutoAtackOnDoublePress(200) && !get_val(GET_DEFEND)) {
		swap(GET_ATACK, BTN_AUTO_ATACK_TMP_1);
		combo_run(RapidAtackCombo);
		if(!get_val(BTN_AUTO_ATACK_TMP_1)) {
			t = FALSE
		}

		// Auto Snipe
		// if is not walking
		// Disable if fast press in interval less than 600
		if(TRUE/*abs(get_val(PS3_LY)) < 20*/) {
			if(get_val(BTN_AUTO_ATACK_TMP_1)){
				if(get_ptime(BTN_AUTO_ATACK_TMP_1) < 600 && t == FALSE){
					t2 = FALSE;
				} else { t2 = TRUE; }
				if (t == FALSE) {
					combo_run(power_attack_r);
				}
			} else {
				combo_stop(power_attack_r);
				isSniping = t2
			}
		}
	}

	// Auto Defend
	/*if(toggleAutoDefendOnDoublePress(300, isPr1ReleaseEvent)) {
		swap(GET_DEFEND, BTN_AUTO_DEFEND_TMP_1);
		// if(!get_val(GET_ATACK)) {
		// 	set_val(PRESS_DEFEND, 100);
		// }
		set_val(PRESS_DEFEND, 100);
		if(!get_val(BTN_AUTO_DEFEND_TMP_1)) {
			defT = FALSE
		}

		// Auto Snipe
		// if is not walking
		// Disable if fast press in interval less than 600
		if(get_val(BTN_AUTO_DEFEND_TMP_1)){
			if(get_ptime(BTN_AUTO_DEFEND_TMP_1) < 600 && defT == FALSE){
				defT2 = FALSE;
			} else { defT2 = TRUE; }
		} else {
			defIsSniping = defT2
		}
	}*/
	
	// Pr1 Events
	isPr1ReleaseEvent = false;
	isPr1PressEvent = false;
	if(pr1LastValue == 0 && get_val(XB1_PR1) > 0) {
		isPr1PressEvent = true;
	}
	if(pr1LastValue > 0 && get_val(XB1_PR1) == 0) {
		isPr1ReleaseEvent = true;
	}
	pr1LastValue = get_val(XB1_PR1);


	
	// Auto run if press start while auto walking
	if (isAutoWalkingY) {
		if(event_press(GET_SELECT)){
			combo_run(Run);
		}
	}

	// Auto Walk Y
	if(isAutoWalkingY) {
		if((walkDirectionY == DIR_FORWARD && isLeftAxisBackward(60)) 
			|| (walkDirectionY == DIR_BACKWARD && get_val(PS3_LY) < -60)) {
			isAutoWalkingY = FALSE;
		} else {
			set_val(XB1_LY, 100 * walkDirectionY);
		}
	} else {
		if (isMultiPressStickAnyDirection(GET_SELECT, PS3_LY, 30)) {
			isAutoWalkingY = TRUE;
			walkDirectionY = getDirection(PS3_LY)
		}
	}
	
	// HOLD RT FOR 400ms for RTHoldCombo
	//if (event_release(GET_RT)) {
	//	if (blockRTPressCombo) {
	//		blockRTPressCombo = FALSE;
	//	} else {
	//		// Press this key if hold for less than 400ms
	//		combo_run(RTPressCombo);
	//	}
	//} else if (get_val(GET_RT) == 100) {
	//	// Activate if press time is greater than 400 ms
	//	if (get_ptime(GET_RT) > 400) {
	//		set_val(PRESS_SELECT, 100);
	//		blockRTPressCombo = TRUE;
	//	}
	//}
	if(get_val(GET_RT)) {set_val(PRESS_SELECT, 100)}

	// HOLD START FOR 400ms for StartHoldCombo
	if (event_release(GET_START)) {
		if (doStart) {
			doStart = FALSE;
			onStartMenu();
			combo_run(StartHoldCombo);
		} else {
			// Press this key if hold for less than 400ms
			// set_val(XB1_B, 100)
		}
	} else if (get_val(GET_START) == 100) {
		// Activate if press time is greater than 400 ms
		if (get_ptime(GET_START) > 400) {
			doStart = TRUE;
		} else {
			// Press this key when holding for less than 400ms
			// set_val(XB1_B, 100)
		}
	}

	// HOLD SELECT FOR 400ms for SelectHoldCombo
	if (event_release(GET_SELECT)) {
		if (doSelect) {
			doSelect = FALSE;
			onSelectMenu();
			combo_run(SelectHoldCombo);
		} else {
			// Press this key if hold for less than 400ms
			// set_val(XB1_A, 100)
		}
	} else if (get_val(GET_SELECT) == 100) {
		// Activate if press time is greater than 400 ms
		if (get_ptime(GET_SELECT) > 400) {
			doSelect = TRUE;
		} else {
			// Press this key when holding for less than 400ms
			// set_val(XB1_A, 100)
		}
	}

	// HOLD HOME FOR 600ms for HomeHoldCombo
	if (event_release(GET_HOME)) {
		if (doHome) {
			doHome = FALSE;
			onHomeMenu();
			combo_run(HomeHoldCombo);
		} else {
			// Press this key if hold for less than 600ms
			combo_run(HomeHoldCombo)
			onHomeMenu();
			set_val(XB1_RS, 100)
		}
	} else if (get_val(GET_HOME) == 100) {
		// Activate if press time is greater than 600ms
		if (get_ptime(GET_HOME) > 600) {
			doHome = TRUE;
		} else {
			// Press this key when holding for less than 600ms
			set_val(XB1_RS, 100)
		}
	}
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1;
	} else if (get_val(stick) < 0) {
		return -1;
	}

	return 0;
}

function isLeftAxisForward(min_intensity) {
	return get_val(PS3_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(PS3_LY) >= min_intensity
}

function isLeftAxisLeft(min_intensity) {
	return get_val(PS3_LX) < -min_intensity
}

function isLeftAxisRight(min_intensity) {
	return get_val(PS3_LX) >= min_intensity
}

function onStartMenuHotkeyComboPressed() {
	doStart = FALSE;
	doActivateRadar = FALSE;
}

function onStartMenu() {
	isAutoWalkingY = FALSE;
	isAutoAtacking = FALSE;
}

function onSelectMenu() {
	isAutoWalkingY = FALSE;
	isAutoAtacking = FALSE;
}

function onHomeMenu() {
	isAutoWalkingY = FALSE;
	isAutoAtacking = FALSE;
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt);
	}

	return 0;
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE;
	}

	return FALSE;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && (abs(get_val(stick)) >= sensitivity)) {
		return TRUE;
	}
	return FALSE;
}

function toggleAutoAtackOnDoublePress(doublePressSpeed) {
	// Reset sucessive press count if interval passes expiration window
	if(tapExpire > 0) {
		tapExpire = tapExpire - get_rtime();
		if (tapExpire <= 0) {
			taps = 0;
		}
	}
	// Increase accumulated press count
	if(!isAutoAtacking && event_press(PRESS_ATACK)) {
		taps = taps + 1;
		tapExpire = doublePressSpeed;
	}
	// If accumulated sucessive press count greater than 2
	if(!isAutoAtacking && taps >= 2) {
		isAutoAtacking = TRUE; //make isAutoRunning_00 true if false, false if true
		t = TRUE;
		t2 = TRUE;
		isSniping = TRUE;
		tapExpire = 0;
		taps = 0;
	} else {
		// Stops auto attacking if releases attack button before activating sniping mode
		if (isAutoAtacking && !isSniping && event_release(BTN_AUTO_ATACK_TMP_1)) {
			combo_stop(power_attack_r);
			isAutoAtacking = FALSE;
			taps = 0;
		}
	}

	return isAutoAtacking;
}

function toggleAutoDefendOnDoublePress(doublePressSpeed, isReleaseEvt) {
	// Reset sucessive press count if interval passes expiration window
	if(defTapExpire > 0) {
		defTapExpire = defTapExpire - get_rtime();
		if (defTapExpire <= 0) {
			defTaps = 0;
		}
	}
	// Increase accumulated press count
	if(!isAutoDefending && event_press(PRESS_DEFEND)) {
		defTaps = defTaps + 1;
		defTapExpire = doublePressSpeed;
	}
	// If accumulated sucessive press count greater than 2
	if(!isAutoDefending && defTaps >= 2) {
		isAutoDefending = TRUE; //make isAutoRunning_00 true if false, false if true
		defT = TRUE;
		defT2 = TRUE;
		defIsSniping = TRUE;
		defTapExpire = 0;
		defTaps = 0;
	} else {
		// Stops auto attacking if releases attack button before activating sniping mode
		if (isAutoDefending && !defIsSniping && isReleaseEvt) {
			// combo_stop(snipe);
			isAutoDefending = FALSE;
			defTaps = 0;
		}
	}

	return isAutoDefending;
}

function pressOnDoublePress(doublePressSpeed, isReleaseEvt) {
	// Reset sucessive press count if interval passes expiration window
	if(py_TapExpire > 0) {
		py_TapExpire = py_TapExpire - get_rtime();
		if (py_TapExpire <= 0) {
			py_Taps = 0;
		}
	}
	// Increase accumulated press count
	if(!is_py && event_press(XB1_LT)) {
		py_Taps = py_Taps + 1;
		py_TapExpire = doublePressSpeed;
	}
	// If accumulated sucessive press count greater than 2
	if(!is_py && py_Taps >= 2) {
		is_py = TRUE; //make isAutoRunning_00 true if false, false if true
		py_TapExpire = 0
	} else {
		// Stops auto attacking if releases attack button before activating sniping mode
		if (is_py && isReleaseEvt) {
			// combo_stop(snipe);
			is_py = FALSE;
			py_Taps = 0;
		}
	}

	return is_py;
}

combo Run {
    set_val(PRESS_RT, 100);
    wait(200); 
}

combo StartHoldCombo {
    set_val(PRESS_START, 100);
    wait(200); 
    set_val(PRESS_START, 0);
}

combo SelectHoldCombo {
    set_val(PRESS_SELECT, 100);
    wait(200); 
    set_val(PRESS_SELECT, 0);
}

combo HomeHoldCombo {
    set_val(PRESS_HOME, 100);
    wait(200); 
    set_val(PRESS_HOME, 0);
}

combo RTPressCombo {
    set_val(PRESS_RT, 100);
    wait(100); 
    set_val(PRESS_RT, 0);
}

combo RapidAtackCombo {
    set_val(PRESS_ATACK, 100);
    wait(70);
    set_val(PRESS_ATACK, 0);
    wait(50);
}

combo power_attack_r {
    set_val(PRESS_ATACK, 100);
    wait(2000);
    set_val(PRESS_ATACK, 0);
}

combo trace {
    set_val(TRACE_2, 100);
    wait(200);
    set_val(TRACE_2, 0);
}

combo press_target_lock {
	set_val(PRESS_SELECT, 100);
    wait(1);
    set_val(PRESS_SELECT, 0);
}

combo press_lt {
	set_val(XB1_LT, 100);
    wait(100);
    set_val(XB1_LT, 0);
}