//|-------------------------------|
// Thu Apr 25 2019 12:02:29
// Script generated by GPC BLOCKLY
//
// Xbox button should map to PRESS_START
//
//|-------------------------------|

// UTILITIES
define FORWARD = -40;
define BACKWARD = 40;
define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;
define true = TRUE;

int doHome, direction, doStart, doSelect, walkDirection;
int isAutoWalking;

int taps, tapExpire, isRapidJumpJustStarted, isRapidJumping, isDoContinueRapidJump;
int taps2, tapExpire2, isHoldFireJustStarted, isHoldingFire, isDoContinueHoldFire;


// REMAPS
define BTN_START = XB1_A;
define PRESS_SELECT = XB1_PR2;
define PRESS_START = XB1_PL1;
define PRESS_HOME = XB1_XBOX;

define GET_SELECT = XB1_VIEW;
define GET_START = XB1_MENU;
define GET_HOME = XB1_XBOX;

define GET_A = XB1_A;
define PRESS_A = XB1_Y;

define GET_Y = XB1_Y;
define PRESS_Y = TRACE_1;

remap XB1_Y -> TRACE_1;
remap TRACE_1 -> XB1_A;
//unmap XB1_A;
remap XB1_A -> XB1_Y;

define GET_HOLD_FIRE = XB1_RB;
define PRESS_HOLD_FIRE = XB1_PL2;

define PRESS_RAPID_JUMP = XB1_A;
define GET_RAPID_JUMP = GET_Y;

// PRESS START
remap XB1_MENU -> PRESS_START;
remap PRESS_START -> XB1_MENU;

// PRESS SELECT
remap XB1_VIEW -> PRESS_SELECT;
remap PRESS_SELECT -> XB1_VIEW;

// PRESS HOME
unmap XB1_XBOX;
remap XB1_XBOX -> PRESS_START;
//remap PRESS_HOME -> XB1_XBOX;

init {
	doHome = TRUE;
	direction = -1;
	doSelect = TRUE;
	isDoContinueRapidJump = FALSE;
}

main {
	set_val(XB1_RX, useDeadzone(XB1_RX, 15));
	set_val(XB1_RY, useDeadzone(XB1_RY, 10));
	set_val(XB1_LX, useDeadzone(XB1_LX, 22));
	set_val(XB1_LY, useDeadzone(XB1_LY, 10));

	if(get_val(PS3_L1)) set_val(PS3_L1, 100);
	if(get_val(PS3_L2)) set_val(PS3_L2, 100);
	if(get_val(PS3_R1)) set_val(PS3_R1, 100);
	if(get_val(PS3_R2)) set_val(PS3_R2, 100);

	// Rapid Jump
	if(toggleRapidJumpOnDoublePress(200)) {
		//swap(GET_RAPID_JUMP, PS3_L1);
		//swap(PRESS_RAPID_JUMP, GET_RAPID_JUMP);
		combo_run(rapidJump);
		if(event_release(GET_RAPID_JUMP) || event_release(GET_START)) { // released for the first time
			if(isRapidJumpJustStarted) { 
				isRapidJumpJustStarted = FALSE;
				isDoContinueRapidJump = FALSE;
			}
		}
	}

	// Hold Fire
	if(toggleHoldFireOnDoublePress(200)) {
		swap(GET_HOLD_FIRE, PRESS_HOLD_FIRE);
		set_val(GET_HOLD_FIRE, 100);
		if(event_release(PRESS_HOLD_FIRE)) { // released for the first time
			if(isHoldFireJustStarted) {
				isHoldFireJustStarted = FALSE;
				isDoContinueHoldFire = FALSE;
			}
		}
	}

	if (isMultiPress(GET_Y, GET_SELECT)) {
		hotkeyPressed();
		doRapidJump();
	}

	// Auto Run
	if (isAutoWalking) {
		if(event_press(GET_SELECT)){
			combo_run(lt);
			isRapidJumping = FALSE;
			hotkeyPressed();
		}
	}

	// Auto Walk
	if(isAutoWalking) {
		if((walkDirection == DIR_FORWARD && isLeftAxisBackward(60)) 
			|| (walkDirection == DIR_BACKWARD && get_val(PS3_LY) < -60)) {
			isAutoWalking = FALSE;
		} else {
			set_val(XB1_LY, 100 * walkDirection);
		}
	} else {
		if (isMultiPressStickAnyDirection(GET_SELECT, PS3_LY, 30)) {
			isAutoWalking = TRUE;
			walkDirection = getDirection(PS3_LY);
			hotkeyPressed();
		}
	}
	
	// SELECT HOTKEY + BUTTON
	if (event_release(GET_SELECT)) {
		if (doSelect) {
			combo_run(rs);
		} else {
			doSelect = TRUE;
		}
	} else if (get_val(GET_SELECT) == 100) {
		if (get_ptime(GET_SELECT) > 400) {
			doSelect = FALSE;
			set_val(PRESS_SELECT, 100);
		}
	}
	
	// START HOTKEY + BUTTON
	if (get_val(GET_START)) {
		combo_run(press_a);
	}
	/*if (event_release(GET_START)) {
		if (doStart) {
			doStart = FALSE;
			onStartMenu();
			combo_run(start);
		} else {
			set_val(PRESS_A, 100)
		}
	} else if (get_val(GET_START) == 100) {
		if (get_ptime(GET_START) > 400) {
			doStart = TRUE;
		} else {
			set_val(PRESS_A, 100)
		}
	}*/

	// HOLD HOME FOR 600ms for HomeHoldCombo
	if (get_val(GET_HOME)) {
		onStartMenu();
		combo_run(start);
	}
}

function onStartMenu() {
	isRapidJumping = FALSE;
	isHoldingFire = FALSE;
	isAutoWalking = FALSE;
	return 0;
}

function onSelectMenu() {
	onStartMenu();
	return 0;
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1;
	} else if (get_val(stick) < 0) {
		return -1;
	}

	return 0;
}

function isLeftAxisForward(min_intensity) {
	return get_val(PS3_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(PS3_LY) >= min_intensity
}

function hotkeyPressed() {
	doSelect = FALSE;
}

function toggleRapidJumpOnDoublePress(doublePressSpeed) {
	if(tapExpire > 0) {
		tapExpire = tapExpire - get_rtime();
		if (tapExpire <= 0) {
			taps = 0;
		}
	}
	if(!isRapidJumping && event_press(GET_RAPID_JUMP)) {
		taps = taps + 1;
		tapExpire = doublePressSpeed;
	}
	if(!isRapidJumping && taps >= 2) {
		doRapidJump();
	} else {
		if (isRapidJumping && !isDoContinueRapidJump && (event_release(GET_RAPID_JUMP) || event_release(GET_START))) {
			combo_stop(rapidJump);
			set_val(PRESS_Y, 0);
			isRapidJumping = FALSE;
			taps = 0;
		}
	}

	return isRapidJumping;
}

function doRapidJump() {
	isRapidJumping = TRUE;
	isRapidJumpJustStarted = TRUE;
	isDoContinueRapidJump = TRUE;
	tapExpire = 0;
	taps = 0;
}

function toggleHoldFireOnDoublePress(doublePressSpeed) {
	if(tapExpire2 > 0) {
		tapExpire2 = tapExpire2 - get_rtime();
		if (tapExpire2 <= 0) {
			taps2 = 0;
		}
	}
	if(!isHoldingFire && event_press(GET_HOLD_FIRE)) {
		taps2 = taps2 + 1;
		tapExpire2 = doublePressSpeed;
	}
	if(!isHoldingFire && taps2 >= 2) {
		doHoldFire();
	} else {
		if (isHoldingFire && !isDoContinueHoldFire && event_release(GET_HOLD_FIRE)) {
			isHoldingFire = FALSE;
			taps2 = 0;
		}
	}

	return isHoldingFire;
}

function doHoldFire() {
	isHoldingFire = TRUE;
	isHoldFireJustStarted = TRUE;
	isDoContinueHoldFire = TRUE;
	tapExpire2 = 0;
	taps2 = 0;
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE;
	}

	return FALSE;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && abs(get_val(stick)) >= sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt);
	}

	return 0;
}

combo press_x {
	set_val(XB1_X, 100);
	wait(40);
}

combo press_a {
	set_val(PRESS_Y, 100);
	wait(200);
	set_val(PRESS_Y, 0);
}

combo toggle_lights {
	set_val(XB1_RS, 100);
	wait(1000);
}

combo rs {
    set_val(XB1_RS, 100); // Press X / Square to reload
    wait(60);  // Press X / Square for 200ms
}

combo ls {
    set_val(XB1_LS, 100);
    wait(200); 
}

combo lt {
    set_val(XB1_LT, 100);
    wait(200); 
}

combo xbox {
    set_val(XB1_PR1, 100);
    wait(200); 
}

combo start {
    set_val(PRESS_START, 100);
    wait(200); 
    set_val(PRESS_START, 0);
}

combo select {
    set_val(PRESS_SELECT, 100);
    wait(200); 
    set_val(PRESS_SELECT, 0);
}

combo rapidJump {
	set_val(PRESS_Y, 100);
	wait(70);
	set_val(PRESS_Y, 0);
}


//if((get_val(PS3_R1)) && (get_ptime(PS3_R1)) <= 1500) {
//    set_val(XB1_A, 100);
//}
