//|-------------------------------|
// Thu Apr 25 2019 12:02:29
// Script generated by GPC BLOCKLY
//
// Xbox button should map to PRESS_START
//
//|-------------------------------|

// UTILITIES
define FORWARD = -40;
define BACKWARD = 40;
define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;
define true = TRUE;

int doHoldX, doHome, doDisableAim, direction, doStart, doSelect, walkDirection;
int taps, tapExpire, isAutoAimJustStarted, isContinueAutoAimAfterReleaseSnipeButton;
int isAutoWalking, isAutoAiming, isDoContinueAutoAim, snipeTime;
int isHoldX, isRSDirectional;

// REMAPS
define BTN_START = PS3_CROSS;
define PRESS_SELECT = XB1_PR2;
define PRESS_START = XB1_PL1;
define PRESS_HOME = XB1_PR1;

define GET_SELECT = XB1_VIEW;
define GET_START = XB1_MENU;
define GET_HOME = XB1_XBOX;
define GET_A = XB1_A;
define PRESS_A = XB1_Y;

// PRESS START
remap XB1_MENU -> PRESS_START;
remap PRESS_START -> XB1_MENU;

// PRESS SELECT
remap XB1_VIEW -> PRESS_SELECT;
remap PRESS_SELECT -> XB1_VIEW;

// PRESS HOME
remap XB1_XBOX -> PRESS_HOME;
remap PRESS_HOME -> XB1_XBOX;

remap PS3_L1 -> PS3_L2;
remap PS3_L2 -> PS3_L1;

remap PS3_R2 -> PS3_R1;
remap PS3_R1 -> PS3_R2;

remap XB1_Y -> XB1_A;
remap XB1_A -> XB1_Y;

init {
	doHoldX = TRUE;
	doHome = TRUE;
	direction = -1;
	doDisableAim = TRUE;
	doSelect = FALSE;
	isDoContinueAutoAim = FALSE;
	snipeTime = 0;
	isContinueAutoAimAfterReleaseSnipeButton = TRUE;
	isHoldX = FALSE;
	isRSDirectional = FALSE;
}

main {
	set_val(XB1_RX, useDeadzone(XB1_RX, 15))
	set_val(XB1_RY, useDeadzone(XB1_RY, 10))
	set_val(XB1_LX, useDeadzone(XB1_LX, 22))
	set_val(XB1_LY, useDeadzone(XB1_LY, 10))

	if(get_val(PS3_L1)) set_val(PS3_L1, 100);
	if(get_val(PS3_L2)) set_val(PS3_L2, 100);
	if(get_val(PS3_R1)) set_val(PS3_R1, 100);
	if(get_val(PS3_R2)) set_val(PS3_R2, 100);
	
	if(get_val(PS3_LY) > 20) {
		set_val(PS3_LY, 100)
	} else if(get_val(PS3_LY) < -20) {
		set_val(PS3_LY, -100)
	}
	if(get_val(PS3_LX) > 20) {
		set_val(PS3_LX, 100)
	} else if(get_val(PS3_LX) < -20) {
		set_val(PS3_LX, -100)
	}
	
	if(get_val(PS3_RY) > 20) {
		set_val(PS3_RY, 100)
	} else if(get_val(PS3_RY) < -20) {
		set_val(PS3_RY, -100)
	}
	if(get_val(PS3_RX) > 20) {
		set_val(PS3_RX, 100)
	} else if(get_val(PS3_RX) < -20) {
		set_val(PS3_RX, -100)
	}

	// Toggle RS Directional
	if(isRSDirectional) {
		if (event_press(XB1_RS)) {
			isRSDirectional = FALSE;
		} else {
			if(get_val(PS3_RX) < -30) {
				set_val(PS3_RX, 0);
				set_val(PS3_LEFT, 100);
			} else if(get_val(PS3_RX) > 30) {
				set_val(PS3_RX, 0);
				set_val(PS3_RIGHT, 100);
			} else if(get_val(PS3_RY) < -30) {
				set_val(PS3_RY, 0);
				set_val(PS3_UP, 100);
			} else if(get_val(PS3_RY) > 30) {
				set_val(PS3_RY, 0);
				set_val(PS3_DOWN, 100);
			}
		}
	} else if(event_press(XB1_RS)) {
		isRSDirectional = TRUE;
	}

	// Auto Run
	if (isAutoWalking) {
		if(event_press(GET_SELECT)){
			combo_run(rb);
			isAutoAiming = FALSE;
			hotkeyPressed();
		}
	}

	// Auto Walk
	if(isAutoWalking) {
		if((walkDirection == DIR_FORWARD && isLeftAxisBackward(60)) 
			|| (walkDirection == DIR_BACKWARD && get_val(PS3_LY) < -60)) {
			isAutoWalking = FALSE;
		} else {
			set_val(XB1_LY, 100 * walkDirection);
		}
	} else {
		if (isMultiPressStickAnyDirection(GET_SELECT, PS3_LY, 30)) {
			isAutoWalking = TRUE;
			isAutoAiming = FALSE;
			walkDirection = getDirection(PS3_LY);
			hotkeyPressed();
		}
	}

	// Hold X
	if(event_press(PS3_CROSS)) {
		isHoldX = FALSE;
	} else if (isHoldX) {
		set_val(XB1_X, 100);
	}
	
	// SELECT HOTKEY + BUTTON
	if (event_release(GET_SELECT)) {
		if (doSelect) {
			doSelect = FALSE;
			onSelectMenu();
			combo_run(select);
		} else {
			if (!isAutoWalking) set_val(PRESS_SELECT, 100)
		}
	} else if (get_val(GET_SELECT) == 100) {
		if (get_ptime(GET_SELECT) > 400 && FALSE) {
			doSelect = TRUE;
		} else {
			if (!isAutoWalking) {
				set_val(PRESS_SELECT, 100)
			}
		}
	}
	
	// START HOTKEY + BUTTON
	if (get_val(GET_START)) {
		set_val(PRESS_A, 100);
	}
	/*if (event_release(GET_START)) {
		if (doStart) {
			doStart = FALSE;
			onStartMenu();
			combo_run(start);
		} else {
			set_val(PRESS_A, 100)
		}
	} else if (get_val(GET_START) == 100) {
		if (get_ptime(GET_START) > 400) {
			doStart = TRUE;
		} else {
			set_val(PRESS_A, 100)
		}
	}*/

	// HOLD HOME FOR 600ms for HomeHoldCombo
	if (get_val(GET_HOME)) {
		onHomeMenu();
		onStartMenu();
		combo_run(start);
	}
}

function onStartMenu() {
	return 0;
}

function onSelectMenu() {
	return 0;
}

function onHomeMenu() {
	return 0;
}


function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1;
	} else if (get_val(stick) < 0) {
		return -1;
	}

	return 0;
}

function isLeftAxisForward(min_intensity) {
	return get_val(PS3_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(PS3_LY) >= min_intensity
}

function hotkeyPressed() {
	doHoldX = FALSE;
	doSelect = FALSE;
}

function toggleAutoAimOnDoublePress(doublePressSpeed) {
	if(tapExpire > 0) {
		tapExpire = tapExpire - get_rtime();
		if (tapExpire <= 0) {
			taps = 0;
		}
	}
	if(!isAutoAiming && event_press(PS3_L1)) {
		taps = taps + 1;
		tapExpire = doublePressSpeed;
	}
	if(!isAutoAiming && taps >= 2) {
		isAutoAiming = TRUE; //make isAutoRunning_00 true if false, false if true
		isAutoAimJustStarted = TRUE;
		isContinueAutoAimAfterReleaseSnipeButton = TRUE;
		isDoContinueAutoAim = TRUE;
		tapExpire = 0;
		taps = 0;
	} else {
		if (isAutoAiming && !isDoContinueAutoAim && event_release(TRACE_1)) {
			combo_stop(snipe);
			isAutoAiming = FALSE;
			taps = 0;
		}
	}

	return isAutoAiming;
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE;
	}

	return FALSE;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && abs(get_val(stick)) >= sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt);
	}

	return 0;
}

combo toggle_lights {
	set_val(PS3_R3, 100);
	wait(1000);
}

combo r3 {
    set_val(PS3_R3, 100); // Press X / Square to reload
    wait(200);  // Press X / Square for 200ms
}

combo l3 {
    set_val(XB1_LS, 100);
    wait(200); 
}

combo rb {
    set_val(XB1_RT, 100);
    wait(200); 
}


combo xbox {
    set_val(XB1_PR1, 100);
    wait(200); 
}

combo start {
    set_val(PRESS_START, 100);
    wait(200); 
    set_val(PRESS_START, 0);
}

combo select {
    set_val(XB1_PR2, 100);
    wait(200); 
    set_val(XB1_PR2, 0);
}

combo snipe {
    set_val(PS3_L3, 100);
    wait(500);
}

