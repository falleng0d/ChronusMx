//|-------------------------------|
// Thu Apr 25 2019 12:02:29
// Script generated by GPC BLOCKLY
//|-------------------------------|

// UTILITIES
define FORWARD = -40;
define BACKWARD = 40;
define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;
define true = TRUE;
define false = FALSE;

// REMAPS
define BTN_START = PS3_CROSS;
define PRESS_SELECT = XB1_PR2;
define PRESS_START = XB1_PR1;
define PRESS_HOME = XB1_XBOX;
define GET_SELECT = XB1_VIEW;
define GET_START = PS3_START;
define GET_HOME = XB1_XBOX;
define XB_B = PS3_CIRCLE;
define XB_A = PS3_CROSS;
define XB_X = PS3_SQUARE;
define XB_Y = PS3_TRIANGLE;

// AUTO WALK
int walkDirectionY, isAutoWalkingY, walkDirectionX, isAutoWalkingX;

// AUTO RUN
int isAutoRunning;

// OTHERS
int doStart, doSelect, doHome;
int isHoldingY, isComboRelease;
int isHoldingX;

// AUTO HOLD
int isHoldJustStarted, tapExpire, taps, isHolding;

remap PS3_START -> XB1_PR1;
remap XB1_PR1 -> PS3_START;

// PRESS HOME
unmap XB1_XBOX;

// PRESS SELECT
remap XB1_VIEW -> XB1_PR2;
remap XB1_PR2 -> XB1_VIEW;

remap XB1_B -> XB1_A;
remap XB1_A -> XB1_B;

unmap XB1_SHARE;

init {

}

main {
	set_val(XB1_RX, useDeadzone(XB1_RX, 10))
	set_val(XB1_RY, useDeadzone(XB1_RY, 10))
	set_val(XB1_LX, useDeadzone(XB1_LX, 10))
	set_val(XB1_LY, useDeadzone(XB1_LY, 10))

	adt_off(PS5_L2);
    adt_off(PS5_R2);

	set_left_triggers_threshold(10);
    set_right_triggers_threshold(50, 1);
	
	if(event_press(XB1_SHARE)) isHoldingX = !isHoldingX;
    if(isHoldingX) {
        if(event_press(XB1_X) || event_press(XB1_Y) || event_press(XB1_B) 
           || event_press(XB1_A) || event_press(XB1_MENU) || event_press(XB1_VIEW)
           || event_press(XB1_RT) || event_press(XB1_LT)) {
            isHoldingX = FALSE;
        }

        set_val(XB1_X, 100);
    }

	// Rapid Look Arroud
	finger_trigger_left_analog(25);

	// Auto Run
	if (isAutoWalkingY) {
		if(event_press(GET_SELECT)) {
			isAutoRunning = TRUE;
			combo_run(rerun);
		}

		//if(isAutoRunning) {
			// Hold XB1_RT
		set_val(XB1_RT, 100);
		//}
	}

	// Auto Walk Y
	if(isAutoWalkingY) {
		if((walkDirectionY == DIR_FORWARD && isLeftAxisBackward(60)) 
			|| (walkDirectionY == DIR_BACKWARD && get_val(PS3_LY) < -60)) {
			isAutoWalkingY = FALSE;
			isAutoRunning = FALSE;
		} else {
			set_val(XB1_LY, 100 * walkDirectionY);
		}
	} else {
		if (isMultiPressStickAnyDirection(GET_SELECT, PS3_LY, 30) || isMultiPressStickAnyDirection(XB1_SHARE, PS3_LY, 30)) {
			isAutoWalkingY = TRUE;
			walkDirectionY = getDirection(PS3_LY)
		}
	}

	// Auto Walk X
	if(isAutoWalkingX) {
		if((walkDirectionX == DIR_FORWARD && isLeftAxisRight(60)) 
			|| (walkDirectionX == DIR_BACKWARD && get_val(PS3_LX) < -60)) {
			isAutoWalkingX = FALSE;
			isAutoRunning = FALSE;
		} else {
			set_val(XB1_LX, 100 * walkDirectionX);
		}
	} else {
		if (isMultiPressStickAnyDirection(PS3_START, PS3_LX, 30)) {
			isAutoWalkingX = TRUE;
			walkDirectionX = getDirection(PS3_LX)
		}
	}

	// START HOTKEY + BUTTON
	if (event_release(GET_START)) {
		if (doStart) {
			doStart = FALSE;
			onStartMenu();
			combo_run(OpenStartMenu);
		} else {
			set_val(XB_B, 100)
		}
	} else if (get_val(GET_START) == 100) {
		// if (get_ptime(GET_START) > 400 && FALSE) {
		// 	doStart = TRUE;
		// } else {
		set_val(XB_B, 100)
		// }
	}

	// SELECT HOTKEY + BUTTON
	if (event_release(GET_SELECT)) {
		if (doSelect) {
			doSelect = FALSE;
			onSelectMenu();
			combo_run(OpenSelectMenu);
		} else if (isAutoWalkingY == FALSE && isAutoWalkingX == FALSE) {
			set_val(XB_A, 100)
		}
	} else if (get_val(GET_SELECT) == 100 && isAutoWalkingY == FALSE && isAutoWalkingX == FALSE) {
		// if (get_ptime(GET_SELECT) > 400 && FALSE) {
		// 	doSelect = TRUE;
		// } else {
		set_val(XB_A, 100)
		// }
	}

	// HOME HOTKEY + BUTTON
	if (event_press(GET_HOME)) {
        onHomeMenu();
        combo_run(OpenStartMenu);
    }
}

function toggleHoldOnDoublePress(key, doublePressSpeed) {
	if(tapExpire > 0) {
		tapExpire = tapExpire - get_rtime();
		if (tapExpire <= 0) {
			taps = 0;
		}
	}
	if(!isHolding && event_press(key)) {
		taps = taps + 1;
		tapExpire = doublePressSpeed;
	}
	if(!isHolding && taps >= 2) {
		isHolding = TRUE;
		isHoldJustStarted = TRUE;

		tapExpire = 0;
		taps = 0;
	} else if (isHolding && !isHoldJustStarted && event_release(key)) {
        set_val(TRACE_3, 100);
        isHolding = FALSE;
        taps = 0;
	}

	return isHolding;
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1;
	} else if (get_val(stick) < 0) {
		return -1;
	}

	return 0;
}

function isLeftAxisForward(min_intensity) {
	return get_val(PS3_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(PS3_LY) >= min_intensity
}

function isLeftAxisLeft(min_intensity) {
	return get_val(PS3_LX) < -min_intensity
}

function isLeftAxisRight(min_intensity) {
	return get_val(PS3_LX) >= min_intensity
}

function onStartMenuHotkeyComboPressed() {
	doStart = FALSE;
	doActivateRadar = FALSE;
}

function onStartMenu() {
	isAutoWalkingY = FALSE;
	isAutoWalkingX = FALSE;
	isAutoRunning = FALSE;
    isHolding = FALSE;
    taps = 0;
}

function onSelectMenu() {
	onStartMenu();
}

function onHomeMenu() {
	onStartMenu();
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE;
	}

	return FALSE;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && (abs(get_val(stick)) >= sensitivity)) {
		return TRUE;
	}
	return FALSE;
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt);
	}

	return 0;
}

function finger_trigger_left_analog(tolerance) {
    if(get_val(PS4_LY) > tolerance) {
        set_val(PS4_LY, 100)
    } else if(get_val(PS4_LY) < -tolerance) {
        set_val(PS4_LY, -100)
    }
    if(get_val(PS4_LX) > tolerance) {
        set_val(PS4_LX, 100)
    } else if(get_val(PS4_LX) < -tolerance) {
        set_val(PS4_LX, -100)
    }
}

function finger_trigger_right_analog(tolerance) {
	if(get_val(PS4_RY) > tolerance) {
		set_val(PS4_RY, 100)
	} else if(get_val(PS4_RY) < -tolerance) {
		set_val(PS4_RY, -100)
	}
	if(get_val(PS4_RX) > tolerance) {
		set_val(PS4_RX, 100)
	} else if(get_val(PS4_RX) < -tolerance) {
		set_val(PS4_RX, -100)
	}
}

function set_left_triggers_threshold(threshold) {
    if(get_val(PS4_L1) < threshold) set_val(PS4_L1, 0) else set_val(PS4_L1, 100)
	if(get_val(PS4_L2) < threshold) set_val(PS4_L2, 0) else set_val(PS4_L2, 100)
}

function set_right_triggers_threshold(threshold, threshold_small) {
    // if PS4_L2 is pressed(aiming), the threshold is smaller
    if(get_val(PS4_L2) > threshold) {
        threshold = threshold_small
    }

	if(get_val(PS4_R1) < threshold) set_val(PS4_R1, 0) else set_val(PS4_R1, 100)
	if(get_val(PS4_R2) < threshold) set_val(PS4_R2, 0) else set_val(PS4_R2, 100)
}

combo l3 {
    set_val(PS3_L3, 100);
    wait(200);
    set_val(PS3_L3, 0);
}

combo OpenStartMenu {
    set_val(PRESS_START, 100);
    wait(200); 
    set_val(PRESS_START, 0);
}

combo OpenSelectMenu {
    set_val(PRESS_SELECT, 100);
    wait(200); 
    set_val(PRESS_SELECT, 0);
}

combo OpenHomeMenu {
    set_val(PRESS_HOME, 100);
    wait(200); 
    set_val(PRESS_HOME, 0);
}

combo rerun {
	set_val(XB1_RT, 0);
	wait(200);
	set_val(XB1_RT, 100);
}