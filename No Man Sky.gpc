//|-------------------------------|
// Thu Apr 25 2019 12:02:29
// Script generated by GPC BLOCKLY
//|-------------------------------|

// UTILITIES
define FORWARD = -40;
define BACKWARD = 40;
define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;
define true = TRUE;
define false = FALSE;

// REMAPS
define BTN_START = PS3_CROSS;
define BTN_A = PS3_START;

// AUTO AIM 1
define BTN_AUTO_AIM_1 = PS3_L1;
define BTN_AUTO_AIM_TMP_1 = TRACE_1:
int taps_1;
int tapExpire_1;
int isAutoAimJustStarted_1;
int isContinueAutoAimAfterReleaseSnipeButton_1;
int isAutoAiming_1;
int isDoContinueAutoAim_1;

// OTHERS
int walkDirection, isAutoWalking;
int doStart, doSelect;
int doActivateRadar;
int doRapidAttack, doAutoFlightAndMine, doAutoShipBooster, doAutoShoot, doAutoHarvest;
int toggleDirectionalAxis;

remap XB1_PL2 -> XB1_XBOX;

remap BTN_START -> XB1_PR1;
remap XB1_PR1 -> PS3_START;

remap PS3_START -> PS3_CROSS;

remap PS3_SELECT -> XB1_PR2;
remap XB1_PR2 -> PS3_SELECT;

remap PS3_L1 -> PS3_L2;
remap PS3_L2 -> PS3_L1;

remap PS3_R2 -> PS3_R1;
remap PS3_R1 -> PS3_R2;

init {
	isContinueAutoAimAfterReleaseSnipeButton_1 = TRUE;
}

main {
	if(get_val(PS3_L1)) set_val(PS3_L1, 100);
	if(get_val(PS3_L2)) set_val(PS3_L2, 100);
	if(get_val(PS3_R1)) set_val(PS3_R1, 100);
	if(get_val(PS3_R2)) set_val(PS3_R2, 100);

	if(toggleDirectionalAxis) {
		if (event_press(BTN_A) || event_press(PS3_CIRCLE) || event_press(PS3_SELECT)) {
			toggleDirectionalAxis = FALSE:
		} else {
			if(get_val(PS3_LX) < -30) {
				set_val(PS3_LEFT, 100);
			} else if(get_val(PS3_LX) > 30) {
				set_val(PS3_RIGHT, 100);
			} else if(get_val(PS3_LY) < -30) {
				set_val(PS3_UP, 100);
			} else if(get_val(PS3_LY) > 30) {
				set_val(PS3_DOWN, 100);
			}
		}
	} else if(event_press(XB1_XBOX)) {
		toggleDirectionalAxis = TRUE;
	}

	// Rapid Look Arround
	if(get_val(PS3_L1) == 0 && isAutoAiming_1 == FALSE) {
		if(get_val(PS3_RY) > 20) {
			set_val(PS3_RY, 100)
		} else if(get_val(PS3_RY) < -20) {
			set_val(PS3_RY, -100)
		}
		if(get_val(PS3_RX) > 20) {
			set_val(PS3_RX, 100)
		} else if(get_val(PS3_RX) < -20) {
			set_val(PS3_RX, -100)
		}
	}

	// Auto Aim
	toggleAutoAimOnDoublePress(BTN_AUTO_AIM_1, BTN_AUTO_AIM_TMP_1, 200);

	// Auto Run
	if (isAutoWalking) {
		if(event_press(PS3_SELECT)){
			combo_run(run);
			disableAutoAim();
			onSelectMenuHotkeyComboPressed();
		}
	}

	// Auto Walk
	if(isAutoWalking) {
		if((walkDirection == DIR_FORWARD && isLeftAxisBackward(60)) 
			|| (walkDirection == DIR_BACKWARD && get_val(PS3_LY) < -60)) {
			isAutoWalking = FALSE;
		} else {
			set_val(XB1_LY, 100 * walkDirection);
		}
	} else {
		if (isMultiPressStickAnyDirection(PS3_SELECT, PS3_LY, 30)) {
			isAutoWalking = TRUE;
			walkDirection = getDirection(PS3_LY);
			disableAutoAim();
			onSelectMenuHotkeyComboPressed();
		}
	}

	// Rapid Hand Attack on XBOX_BTN + R2
	if(doRapidAttack) {
		if(event_press(PS3_R2)) { doRapidAttack = FALSE; }
		combo_run(rapid_attack)
	} else if(isMultiPress(PS3_SELECT, PS3_R2)) {
		doRapidAttack = TRUE;
		onSelectMenuHotkeyComboPressed();
	}

	// Auto Mine On Select Hotkey + R1
	if(doAutoFlightAndMine) {
		if(event_press(PS3_R1) || event_press(PS3_L1)) { doAutoFlightAndMine = FALSE; }
		set_val(PS3_R1, 100);
	} else if(isMultiPress(PS3_SELECT, PS3_R1)) {
		doAutoFlightAndMine = TRUE;
		onSelectMenuHotkeyComboPressed();
	}

	// Auto Booster On Select Hotkey + B
	if(doAutoShipBooster) {
		if(event_press(PS3_CIRCLE) || event_press(PS3_L1)) { doAutoShipBooster = FALSE; }
		set_val(PS3_CIRCLE, 100);
	} else if(isMultiPress(PS3_SELECT, PS3_CIRCLE)) {
		doAutoShipBooster = TRUE;
		onSelectMenuHotkeyComboPressed();
	}

	// Auto Flight On Select Hotkey + A
	if(doAutoShoot) {
		if(event_press(BTN_A) || event_press(PS3_L1)) { doAutoShoot = FALSE; }
		set_val(BTN_A, 100);
	} else if(isMultiPress(PS3_SELECT, BTN_A)) {
		doAutoShoot = TRUE;
		onSelectMenuHotkeyComboPressed();
	}

	// SELECT HOTKEY + BUTTON
	if (event_release(PS3_SELECT)) {
		if (doSelect) {
			doSelect = FALSE;
			onStartMenu();
			combo_run(OpenSelectMenu);
		} else {
			if(doAutoHarvest) combo_run(HoldXAndRelease);
			else doAutoHarvest = TRUE; 
		}
	} else if (get_val(PS3_SELECT) == 100 && get_ptime(PS3_SELECT) > 400) {
		doSelect = TRUE;
	}

	// START HOTKEY + BUTTON
	if (event_release(BTN_START)) {
		if (doStart) {
			doStart = FALSE;
			onStartMenu();
			combo_run(OpenStartMenu);
		} else {
			if(doActivateRadar) combo_run(ActivateRadar);
			else doActivateRadar = TRUE; 
		}
	} else if (get_val(BTN_START) == 100 && get_ptime(BTN_START) > 400) {
		doStart = TRUE;
	}
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1;
	} else if (get_val(stick) < 0) {
		return -1;
	}

	return 0;
}

function isLeftAxisForward(min_intensity) {
	return get_val(PS3_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(PS3_LY) >= min_intensity
}

function onStartMenuHotkeyComboPressed() {
	doStart = FALSE;
	doActivateRadar = FALSE;
}

function onSelectMenuHotkeyComboPressed() {
	doSelect = FALSE;
	doAutoHarvest = FALSE;
}


function disableAutoAim() {
	isAutoAiming_1 = FALSE;
}

function onStartMenu() {
	isAutoWalking = FALSE;
	doRapidAttack = FALSE;
	isAutoAiming_1 = FALSE;
	doAutoFlightAndMine = FALSE;
	doAutoShipBooster = FALSE;
	doAutoShoot = FALSE;
}

/*function toggleAutoAimOnDoublePress(pressBtn, tempBtn, doublePressSpeed) {
	if(tapExpire_1 > 0) {
		tapExpire_1 = tapExpire_1 - get_rtime();
		if (tapExpire_1 <= 0) {
			taps_1 = 0;
		}
	}
	if(!isAutoAiming && event_press(pressBtn)) {
		taps_1 = taps_1 + 1;
		tapExpire_1 = doublePressSpeed;
	}
	if(!isAutoAiming_1 && taps_1 >= 2) {
		isAutoAiming_1 = TRUE;
		tapExpire_1 = 0;
		taps_1 = 0;
	} else {
		if (isAutoAiming_1 && event_release(tempBtn)) {
			combo_stop(ScanObject);
			isAutoAiming_1 = FALSE;
			taps_1 = 0;
		}	
	}

	return isAutoAiming_1
}*/

function toggleAutoAimOnDoublePress(pressBtn, tempBtn, doublePressSpeed) {
	if(tapExpire_1 > 0) {
		tapExpire_1 = tapExpire_1 - get_rtime();
		if (tapExpire_1 <= 0) {
			taps_1 = 0;
		}
	}
	if(!isAutoAiming_1 && event_press(pressBtn)) {
		taps_1 = taps_1 + 1;
		tapExpire_1 = doublePressSpeed;
	}
	if(!isAutoAiming_1 && taps_1 >= 2) {
		isAutoAiming_1 = TRUE; //make isAutoRunning_00 true if false, false if true
		isAutoAimJustStarted_1 = TRUE;
		isContinueAutoAimAfterReleaseSnipeButton_1 = TRUE;
		isDoContinueAutoAim_1 = TRUE;
		tapExpire_1 = 0;
		taps_1 = 0;
	} else {
		if (isAutoAiming_1 && !isDoContinueAutoAim_1 && event_release(tempBtn)) {
			combo_stop(ScanObject);
			isAutoAiming_1 = FALSE;
			taps_1 = 0;
		}	
	}


	if(isAutoAiming_1) {
		//swap(tempBtn, pressBtn);
		swap(pressBtn, tempBtn);
		set_val(pressBtn, 100);
		if(!get_val(tempBtn)) { // L1 released for the first time after aim started
			isAutoAimJustStarted_1 = FALSE;
		}

		// Auto ScanObject
		if(abs(get_val(PS3_LY)) < 20) { // if is not walking
			if(get_val(tempBtn)){ // Snipe Button Pressed
				if(get_ptime(tempBtn) < 300 && isAutoAimJustStarted_1 == FALSE) { 
					isContinueAutoAimAfterReleaseSnipeButton_1 = FALSE;
				} else { 
					if (isAutoAimJustStarted_1 == FALSE) {
						combo_run(ScanObject);
					}
					isContinueAutoAimAfterReleaseSnipeButton_1 = TRUE; 
				}
			} else {
				//combo_stop(ScanObject);
				isDoContinueAutoAim_1 = isContinueAutoAimAfterReleaseSnipeButton_1
			}
		}
	}
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE;
	}

	return FALSE;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && (abs(get_val(stick)) >= sensitivity)) {
		return TRUE;
	}
	return FALSE;
}

combo HoldXAndRelease {
	set_val(XB1_X, 100);
    wait(1000); 
    set_val(XB1_X, 0);
}

combo ActivateRadar {
    set_val(PS3_L3, 100); // Press X / Square to reload
    wait(200);  // Press X / Square for 200ms
}

combo OpenSelectMenu {
    set_val(XB1_PR2, 100);
    wait(200); 
    set_val(XB1_PR2, 0);
}

combo OpenStartMenu {
    set_val(XB1_PR1, 100);
    wait(200); 
    set_val(XB1_PR1, 0);
}

combo run {
    set_val(PS3_R3, 100);
    wait(200); 
}

combo ScanObject {
    set_val(PS3_R1, 100);
    wait(4000);
    set_val(PS3_R1, 0);
}

combo rapid_attack {
    set_val(PS3_R2, 100);
    wait(40);
    set_val(PS3_R2, 0);
    wait(40);
    set_val(PS3_R2, 100);
    wait(40);
}

    //if((get_val(PS3_R1)) && (get_ptime(PS3_R1)) <= 1500) {
    //    set_val(PS3_CIRCLE, 100);
    //}
