// UTILITIES
define FORWARD = -40;
define BACKWARD = 40;
define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;
define true = TRUE;
define false = FALSE;

// REMAPS
define BTN_START = XB1_A;
define PRESS_SELECT = XB1_PR2;
define PRESS_START = XB1_PR1;
define PRESS_HOME = XB1_PL1;
define GET_SELECT = XB1_VIEW;
define GET_START = XB1_MENU;
define GET_HOME = XB1_XBOX;
define XB_B = XB1_B;
define XB_A = XB1_A;
define XB_X = XB1_X;
define XB_Y = XB1_Y;
define GET_L1 = XB1_LB;
define PRESS_L1 = XB1_LB;

// AUTO AIM
define GET_AUTO_AIM = XB1_LB;
define SET_AUTO_AIM = XB1_LB;

// OTHERS
int doDisableAim;
int taps, tapExpire, isAutoAimJustStarted, isContinueAutoAimAfterReleaseSnipeButton;
int isAutoAiming, isDoContinueAutoAim, snipeTime;

int walkDirectionY, isAutoWalkingY, walkDirectionX, isAutoWalkingX;
int doStart, doSelect, doHome;
int didStartAction;

int isHoldingY, isComboRelease;
int direction;

remap XB1_MENU -> XB1_PR1;
remap XB1_PR1 -> XB1_MENU;

// remap XB1_LB -> TRACE_1;
///remap TRACE_1 -> XB1_LB;

// PRESS HOME
unmap XB1_XBOX;
remap XB1_XBOX -> XB1_Y
// remap XB1_XBOX -> XB1_MENU
// remap XB1_PL1 -> XB1_MENU;

// PRESS SELECT
remap XB1_VIEW -> XB1_PR2;
remap XB1_PR2 -> XB1_VIEW;

// remap XB1_B -> XB1_A;
// remap XB1_A -> XB1_B;

// PRESS SHARE
unmap XB1_SHARE;

unmap XB1_RX;
unmap XB1_RY;

init {
	direction = -1;
	doDisableAim = TRUE;
	isDoContinueAutoAim = FALSE;
	snipeTime = 0;
	isContinueAutoAimAfterReleaseSnipeButton = TRUE;
	didStartAction = FALSE;
}

main {
	if(get_val(XB1_RY) > 5 || get_val(XB1_RY) < -5) set_val(XB1_LY, get_val(XB1_RY));
	if(get_val(XB1_RX) > 5 || get_val(XB1_RX) < -5) set_val(XB1_LX, get_val(XB1_RX));

	//set_val(XB1_RX, useDeadzone(XB1_RX, 10))
	//set_val(XB1_RY, useDeadzone(XB1_RY, 10))
	set_val(XB1_LX, useDeadzone(XB1_LX, 10))
	set_val(XB1_LY, useDeadzone(XB1_LY, 10))
	
    adt_off(XB1_LT);
    adt_off(XB1_RT);

	set_left_triggers_threshold(10);
    set_right_triggers_threshold(10, 1);
	
	if(get_val(XB1_SHARE)) set_val(PRESS_SELECT, 100);

	// Rapid Look Arroud
	if(get_val(XB1_LY) > 25) {
		set_val(XB1_LY, 100)
	} else if(get_val(XB1_LY) < -25) {
		set_val(XB1_LY, -100)
	}
	if(get_val(XB1_LX) > 25) {
		set_val(XB1_LX, 100)
	} else if(get_val(XB1_LX) < -25) {
		set_val(XB1_LX, -100)
	}

	if (get_val(GET_START)) {
		set_val(XB1_A, 100)
	}

	if (get_val(GET_SELECT)) {
		set_val(XB1_B, 100)
	}
}

function finger_trigger_left_analog(tolerance) {
    if(get_val(XB1_LY) > tolerance) {
        set_val(XB1_LY, 100)
    } else if(get_val(XB1_LY) < -tolerance) {
        set_val(XB1_LY, -100)
    }
    if(get_val(XB1_LX) > tolerance) {
        set_val(XB1_LX, 100)
    } else if(get_val(XB1_LX) < -tolerance) {
        set_val(XB1_LX, -100)
    }
}

function finger_trigger_right_analog(tolerance) {
	if(get_val(XB1_RY) > tolerance) {
		set_val(XB1_RY, 100)
	} else if(get_val(XB1_RY) < -tolerance) {
		set_val(XB1_RY, -100)
	}
	if(get_val(XB1_RX) > tolerance) {
		set_val(XB1_RX, 100)
	} else if(get_val(XB1_RX) < -tolerance) {
		set_val(XB1_RX, -100)
	}
}

function set_left_triggers_threshold(threshold) {
    if(get_val(XB1_LB) < threshold) set_val(XB1_LB, 0) else set_val(XB1_LB, 100)
	if(get_val(XB1_LT) < threshold) set_val(XB1_LT, 0) else set_val(XB1_LT, 100)
}

function set_right_triggers_threshold(threshold, threshold_small) {
    // if XB1_LT is pressed(aiming), the threshold is smaller
    if(get_val(XB1_LT) > threshold) {
        threshold = threshold_small
    }

	if(get_val(XB1_RB) < threshold) set_val(XB1_RB, 0) else set_val(XB1_RB, 100)
	if(get_val(XB1_RT) < threshold) set_val(XB1_RT, 0) else set_val(XB1_RT, 100)
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1;
	} else if (get_val(stick) < 0) {
		return -1;
	}

	return 0;
}

function isLeftAxisForward(min_intensity) {
	return get_val(XB1_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(XB1_LY) >= min_intensity
}

function isLeftAxisLeft(min_intensity) {
	return get_val(XB1_LX) < -min_intensity
}

function isLeftAxisRight(min_intensity) {
	return get_val(XB1_LX) >= min_intensity
}

function onStartMenuHotkeyComboPressed() {
	doStart = FALSE;
	doActivateRadar = FALSE;
}

function onStartMenu() {
	isAutoWalkingY = FALSE;
	isAutoWalkingX = FALSE;
}

function onSelectMenu() {
	isAutoWalkingY = FALSE;
	isAutoWalkingX = FALSE;
}

function onHomeMenu() {
	isAutoWalkingY = FALSE;
	isAutoWalkingX = FALSE;
}

function toggleAutoAimOnDoublePress(doublePressSpeed) {
	if(!isAutoAiming && event_press(GET_L1)) {
		taps = 3;
	}
	if(!isAutoAiming && taps >= 2) {
		isAutoAiming = TRUE; //make isAutoRunning_00 true if false, false if true
		isAutoAimJustStarted = TRUE;
		isContinueAutoAimAfterReleaseSnipeButton = TRUE;
		isDoContinueAutoAim = TRUE;
		tapExpire = 0;
		taps = 0;
	// 	set_val(PRESS_L1, 0);
	} else {
		if (isAutoAiming && !isDoContinueAutoAim && event_release(GET_L1)) {
			combo_stop(snipe);
			isAutoAiming = FALSE;
			taps = 0;
			set_val(PRESS_L1, 0);
		}
	}

	return isAutoAiming;
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE;
	}

	return FALSE;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && (abs(get_val(stick)) >= sensitivity)) {
		return TRUE;
	}
	return FALSE;
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt);
	}

	return 0;
}

combo l3 {
    set_val(XB1_LS, 100);
    wait(200);
    set_val(XB1_LS, 0);
}


combo r3 {
    set_val(XB1_RS, 100);
    wait(50);
    set_val(XB1_RS, 0);
}

combo a {
    set_val(XB1_A, 100);
    wait(50);
    set_val(XB1_A, 0);
}

combo snipe {
    set_val(XB1_RS, 100);
    wait(50);
}

combo OpenStartMenu {
    set_val(PRESS_START, 100);
    wait(200); 
    set_val(PRESS_START, 0);
}

combo OpenSelectMenu {
    set_val(PRESS_SELECT, 100);
    wait(200); 
    set_val(PRESS_SELECT, 0);
}

combo OpenHomeMenu {
    set_val(PRESS_HOME, 100);
    wait(200); 
    set_val(PRESS_HOME, 0);
}