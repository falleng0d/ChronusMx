// UTILITIES
define FORWARD = -40
define BACKWARD = 40
define DIR_FORWARD = -1
define DIR_BACKWARD = 1
define DIR_LEFT = -1
define DIR_RIGHT = 1
define true = TRUE
define false = FALSE
define MAX_RADIUS = 32767

remap XB1_XBOX -> XB1_PR1;
remap XB1_PR1 -> XB1_XBOX;
define PRESS_XBOX = XB1_PR1;

unmap XB1_SHARE;

int skip_menu

main {
	set_val(XB1_RX, useDeadzone(XB1_RX, 10))
	set_val(XB1_RY, useDeadzone(XB1_RY, 10))
	set_val(XB1_LX, useDeadzone(XB1_LX, 10))
	set_val(XB1_LY, useDeadzone(XB1_LY, 10))

	adt_off(XB1_LT)
	adt_off(XB1_RT)

	set_left_triggers_threshold(1)
	set_right_triggers_threshold(1, 1)

	// Rapid Look Arroud
	rapid_look_around_full_l(10)

	// Xbox button
	if (get_ptime(XB1_XBOX) > 300) {
		set_val(PRESS_XBOX, 100)
		skip_menu = TRUE
	}

	if (event_release(XB1_XBOX)) {
		if (!skip_menu) {
			combo_run(start)
		} else {
			skip_menu = FALSE
		}
	}

	// Share button
	if (get_val(XB1_SHARE)) {
		set_val(XB1_A, 100)
	}
}

// region SCRIPT SPECIFIC



// endregion

// region SHARED UTILITIES

function interpolate(val, inMin, inMax, outMin, outMax) {
	if (val <= inMin) return outMin
	if (val >= inMax) return outMax

	if (((val - inMin) * (outMax - outMin)) >= 0) {
		return outMin + (((val - inMin) * (outMax - outMin)) + ((inMax - inMin) / 2)) / (inMax - inMin)
	}

	return outMin + (((val - inMin) * (outMax - outMin)) - ((inMax - inMin) / 2)) / (inMax - inMin)
}

function interpolate_stick(stick_x, stick_y, deadzone, min_val, max_val) {
	if (get_val(stick_x) > deadzone) {
		set_val(stick_x, interpolate(get_val(stick_x), 1, 100, min_val, max_val))
	} else if (get_val(stick_x) < -deadzone) {
		set_val(stick_x, 0-interpolate(abs(get_val(stick_x)), 1, 100, min_val, max_val))
	}

	if (get_val(stick_y) > deadzone) {
		set_val(stick_y, interpolate(get_val(stick_y), 1, 100, min_val, max_val))
	} else if (get_val(stick_y) < -deadzone) {
		set_val(stick_y, 0-interpolate(abs(get_val(stick_y)), 1, 100, min_val, max_val))
	}
}

function is_analog_outside_circle(x, y, radius) {
	return (x * x + y * y) > radius * radius
}

function rapid_look_around_full_l(tolerance) {
	if (is_analog_outside_circle(get_val(XB1_LX), get_val(XB1_LY), tolerance)) {
		set_polar(POLAR_LS, 0 - get_polar(POLAR_LS, POLAR_ANGLE), MAX_RADIUS)
	}
}

function finger_trigger_left_analog(tolerance) {
	if(get_val(XB1_LY) > tolerance) {
		set_val(XB1_LY, 100)
	} else if(get_val(XB1_LY) < -tolerance) {
		set_val(XB1_LY, -100)
	}
	if(get_val(XB1_LX) > tolerance) {
		set_val(XB1_LX, 100)
	} else if(get_val(XB1_LX) < -tolerance) {
		set_val(XB1_LX, -100)
	}
}

function finger_trigger_right_analog(tolerance) {
	if(get_val(XB1_RY) > tolerance) {
		set_val(XB1_RY, 100)
	} else if(get_val(XB1_RY) < -tolerance) {
		set_val(XB1_RY, -100)
	}
	if(get_val(XB1_RX) > tolerance) {
		set_val(XB1_RX, 100)
	} else if(get_val(XB1_RX) < -tolerance) {
		set_val(XB1_RX, -100)
	}
}

function set_left_triggers_threshold(threshold) {
	if(get_val(XB1_LB) < threshold) set_val(XB1_LB, 0) else set_val(XB1_LB, 100)
	if(get_val(XB1_LT) < threshold) set_val(XB1_LT, 0) else set_val(XB1_LT, 100)
}

function set_right_triggers_threshold(threshold, threshold_small) {
	// if XB1_LT is pressed(aiming), the threshold is smaller
	if(get_val(XB1_LT) > threshold) {
		threshold = threshold_small
	}

	if(get_val(XB1_RB) < threshold) set_val(XB1_RB, 0) else set_val(XB1_RB, 100)
	if(get_val(XB1_RT) < threshold) set_val(XB1_RT, 0) else set_val(XB1_RT, 100)
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1
	} else if (get_val(stick) < 0) {
		return -1
	}

	return 0
}

function isLeftAxisForward(min_intensity) {
	return get_val(XB1_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(XB1_LY) >= min_intensity
}

function isLeftAxisLeft(min_intensity) {
	return get_val(XB1_LX) < -min_intensity
}

function isLeftAxisRight(min_intensity) {
	return get_val(XB1_LX) >= min_intensity
}

function isWalking() {
	return abs(get_val(XB1_LY)) > 20
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE
	}

	return FALSE
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE
	}

	return FALSE
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE
	}

	return FALSE
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && (abs(get_val(stick)) >= sensitivity)) {
		return TRUE
	}
	return FALSE
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt)
	}

	return 0
}

// endregion

// region COMBOS

combo start {
	set_val(XB1_MENU, 100)
	wait(100)
	set_val(XB1_MENU, 0)
}

// Trigger run forward
combo l3 {
	set_val(XB1_LS, 100)
	wait(200)
	set_val(XB1_LS, 0)
}

// Hold breath while sniping
combo snipe {
	set_val(XB1_RS, 100)
	wait(50)
}

// Rapid Press RT
combo rt {
	set_val(XB1_RT, 100)
	wait(100)
	set_val(XB1_RT, 0)
	wait(50)
}

// endregion
