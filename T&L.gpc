// Game: Throne & Liberty

// region OLED DEFINITIONS
define White = OLED_WHITE
define Black = OLED_BLACK
define FontSmall = OLED_FONT_SMALL
define FontMedium = OLED_FONT_MEDIUM
define FontLarge = OLED_FONT_LARGE
define FontWidthSmall = OLED_FONT_SMALL_WIDTH
define FontWidthMedium = OLED_FONT_MEDIUM_WIDTH
define FontWidthLarge = OLED_FONT_LARGE_WIDTH
define FontHeightSmall = OLED_FONT_SMALL_HEIGHT
define FontHeightMedium = OLED_FONT_MEDIUM_HEIGHT
define FontHeightLarge = OLED_FONT_LARGE_HEIGHT
define Left = -1
define Center = -2
define Right = -3
define String = 0
define Value = 1
define Oled = 2
// endregion

// UTILITIES
define FORWARD = -40
define BACKWARD = 40
define DIR_FORWARD = -1
define DIR_BACKWARD = 1
define DIR_LEFT = -1
define DIR_RIGHT = 1
define true = TRUE
define false = FALSE
define L_STICK_TOLERANCE = 5
define DEADZONE = 5
define MENU_DEADZONE = 20
define MAX_RADIUS = 32767
define MAX_OBSERVED_RADIUS = 10000

// REMAPS
define BTN_START = XB1_A
define PRESS_SELECT = XB1_PR2
define PRESS_START = XB1_PR1
define PRESS_HOME = XB1_PR1
define GET_SELECT = XB1_VIEW
define GET_START = XB1_MENU
define GET_HOME = XB1_XBOX
define GET_LB = XB1_LB
define PRESS_LB = XB1_LB

// OLED
define NEXT = 1
define PREV = -1
int Update, OledClear, stringLength, n, i

// CLASS
int classChanged, changedWithStick, modeChanged, modeChangedWithStick
int selectedClass // 0: No Class, 1: Warrior
int selectedMode // 0: No Toggle, 1: Toggle
const string Classes[] = {"No Class", "Warrior"}
const string Modes[] = {"No Toggle", "Toggle"}

// OTHERS
int walkDirectionY, isAutoWalkingY
int doStart, doSelect, doHome
int pressRBCount, toggleAutoRBSkill
int pressRTCount, toggleAutoRTSkill
int skipB

remap XB1_MENU -> XB1_PR1
remap XB1_PR1 -> XB1_MENU

// PRESS HOME
unmap XB1_XBOX
// remap XB1_XBOX -> XB1_MENU
// remap XB1_PL1 -> XB1_MENU

// PRESS SELECT
remap XB1_VIEW -> XB1_PR2
remap XB1_PR2 -> XB1_VIEW

// PRESS SHARE
unmap XB1_SHARE

init {
	adt_off(XB1_LT)
	adt_off(XB1_RT)
	reset_leds()
    scheduleOledUpdate()
	selectedClass = 1
	selectedMode = 1
}

main {
	set_val(XB1_RX, useDeadzone(XB1_RX, DEADZONE))
	set_val(XB1_RY, useDeadzone(XB1_RY, DEADZONE))
	set_val(XB1_LX, useDeadzone(XB1_LX, DEADZONE))
	set_val(XB1_LY, useDeadzone(XB1_LY, DEADZONE))

	set_left_triggers_threshold(1)
	set_right_triggers_threshold(1, 1)
	
	// Rapid Look Arroud
	rapid_look_around_full_l(5)
	rapid_look_around_full_r(5, 70)
	
	if(get_val(XB1_SHARE)) {
		set_val(PRESS_SELECT, 100)
		onSelectMenu()
	}
	
	if (IS_WARRIOR()) {
		if (IS_TOGGLE()) {
			// Auto Skill
			if (!toggleAutoRBSkill) {
				toggleAutoRBSkill = isRapidDoublePressRB()
			} else if (isAnyAxbyPressed() || event_press(XB1_RB)) {
				toggleAutoRBSkill = FALSE
			}
			
			if (!toggleAutoRTSkill) {
				toggleAutoRTSkill = isRapidDoublePressRT()
			} else if (isAnyAxbyPressed() || event_press(XB1_RT)) {
				toggleAutoRTSkill = FALSE
			}
			
			if (get_val(XB1_RB) || toggleAutoRBSkill) {
				combo_run(auto_skill_abyx)
				set_val(XB1_RB, 100)
			} else if (get_val(XB1_RT) || toggleAutoRTSkill) {
				combo_run(auto_skill_abyx)
				set_val(XB1_RT, 100)
			} else {
				combo_stop(auto_skill_abyx)
			}
			
		} else {
			combo_stop(auto_skill_abyx)
		}
	}
	
	// Rapid Press A on Hold A
	if (get_ival(XB1_A) == 100 && get_ptime(XB1_A) > 500
		|| get_val(GET_START) == 100 && get_ptime(GET_START) > 500) {
		combo_run(a)
	}

	// Auto Run
	if (isAutoWalkingY && event_press(GET_SELECT)) {
		combo_run(l3)
		skipB = TRUE
		toggleAutoRBSkill = FALSE
		toggleAutoRTSkill = FALSE
	}
	
	if (skipB && event_release(PRESS_SELECT)) {
		skipB = FALSE
	}

	// Auto Walk Y
	if(isAutoWalkingY) {
		if((walkDirectionY == DIR_FORWARD && isLeftAxisBackward(60))
			|| (walkDirectionY == DIR_BACKWARD && get_val(XB1_LY) < -60)) {
			isAutoWalkingY = FALSE
		} else {
			set_val(XB1_LY, 100 * walkDirectionY)
		}
	} else {
		if (isMultiPressStickAnyDirection(GET_SELECT, XB1_LY, 30)) {
			isAutoWalkingY = TRUE
			walkDirectionY = getDirection(XB1_LY)
		}
	}
	
	// START HOTKEY
	if (get_val(GET_START) == 100) {
		set_val(XB1_A, 100)
	}

	// SELECT HOTKEY
	if (get_val(GET_SELECT) == 100 && !skipB) {
		set_val(XB1_B, 100)
	}

	// HOME HOTKEY
	if (event_release(GET_HOME)) {
        if (doHome) {
			onHomeMenu()
			combo_run(OpenHomeMenu)
		} else {
			doHome = TRUE
        }
	} else if (get_val(GET_HOME) == 100) {
		checkChangeClass()
		checkChangeMode()
	}
	
	// OLED
	// clearOled()
	updateOled()
}

// region SHARED UTILITIES

function is_analog_outside_circle(x, y, radius) {
	return (x * x + y * y) > radius * radius
}

function rapid_look_around_full_l(tolerance) {
	if (is_analog_outside_circle(get_val(XB1_LX), get_val(XB1_LY), tolerance)) {
		set_polar(POLAR_LS, 0 - get_polar(POLAR_LS, POLAR_ANGLE), MAX_RADIUS)
	}
}

// convert from 0-100 axis to 0-maxObservedRadius polar
function to_polar_radius(val) {
	return (val * MAX_RADIUS) / 100
}

// convert from 0-MAX_OBSERVED_RADIUS axis to 0-MAX_RADIUS polar
function to_max_radius(val) {
	return (val * MAX_RADIUS) / MAX_OBSERVED_RADIUS
}

function rapid_look_around_full_r(deadzone, min_val) {
	if (is_analog_outside_circle(get_val(XB1_RX), get_val(XB1_RY), deadzone)) {
		set_polar(
			POLAR_RS,
			0 - get_polar(POLAR_RS, POLAR_ANGLE),
			max(to_max_radius(get_polar(POLAR_RS, POLAR_RADIUS)), to_polar_radius(min_val))
		)
	}
}

function finger_trigger_left_analog(tolerance) {
	if(get_val(XB1_LY) > tolerance) {
		set_val(XB1_LY, 100)
	} else if(get_val(XB1_LY) < -tolerance) {
		set_val(XB1_LY, -100)
	}
	if(get_val(XB1_LX) > tolerance) {
		set_val(XB1_LX, 100)
	} else if(get_val(XB1_LX) < -tolerance) {
		set_val(XB1_LX, -100)
	}
}

function isAnyAxbyPressed() {
	if(get_val(XB1_A) > 0 || get_val(XB1_B) > 0 || get_val(XB1_X) > 0 || get_val(XB1_Y) > 0) {
		return 100
	}

	return 0
}

function finger_trigger_right_analog(tolerance) {
	if(get_val(XB1_RY) > tolerance) {
		set_val(XB1_RY, 100)
	} else if(get_val(XB1_RY) < -tolerance) {
		set_val(XB1_RY, -100)
	}
	if(get_val(XB1_RX) > tolerance) {
		set_val(XB1_RX, 100)
	} else if(get_val(XB1_RX) < -tolerance) {
		set_val(XB1_RX, -100)
	}
}

function set_left_triggers_threshold(threshold) {
	if(get_val(XB1_LB) < threshold) set_val(XB1_LB, 0) else set_val(XB1_LB, 100)
	if(get_val(XB1_LT) < threshold) set_val(XB1_LT, 0) else set_val(XB1_LT, 100)
}

function set_right_triggers_threshold(threshold, threshold_small) {
	// if XB1_LT is pressed(aiming), the threshold is smaller
	if(get_val(XB1_LT) > threshold) {
		threshold = threshold_small
	}

	if(get_val(XB1_RB) < threshold) set_val(XB1_RB, 0) else set_val(XB1_RB, 100)
	if(get_val(XB1_RT) < threshold) set_val(XB1_RT, 0) else set_val(XB1_RT, 100)
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1
	} else if (get_val(stick) < 0) {
		return -1
	}

	return 0
}

function isLeftAxisForward(min_intensity) {
	return get_val(XB1_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(XB1_LY) >= min_intensity
}

function isRightStickLeft() {
	return get_ival(XB1_RX) < (MENU_DEADZONE * DIR_LEFT)
}

function isRightStickRight() {
	return get_ival(XB1_RX) > (MENU_DEADZONE * DIR_RIGHT)
}

function isRightStickUp() {
	return get_ival(XB1_RY) < (MENU_DEADZONE * DIR_LEFT)
}

function isRightStickDown() {
	return get_ival(XB1_RY) >= (MENU_DEADZONE * DIR_RIGHT)
}

function isLeftStickLeft() {
	return get_ival(XB1_LX) < (MENU_DEADZONE * DIR_LEFT)
}

function isLeftStickRight() {
	return get_ival(XB1_LX) > (MENU_DEADZONE * DIR_RIGHT)
}

function isLeftStickUp() {
	return get_ival(XB1_LY) < (MENU_DEADZONE * DIR_LEFT)
}

function isLeftStickDown() {
	return get_ival(XB1_LY) >= (MENU_DEADZONE * DIR_RIGHT)
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE
	}

	return FALSE
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE
	}

	return FALSE
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE
	}

	return FALSE
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && (abs(get_val(stick)) >= sensitivity)) {
		return TRUE
	}
	return FALSE
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt)
	}

	return 0
}

// endregion

// region OLED UTILITIES

function paint(f_string, f_x, f_y, f_font, f_color, f_type) {
    if (f_type == String) {
        print(xLocation(getStringLength(f_string), f_font, f_x), f_y, f_font, f_color, f_string)
    } else if (f_type == Value) {
        if (f_string < 0) { putc_oled(1, 45) }
        if (f_string) {
            for (n = find_digits(f_string) + i = (f_string < 0), f_string = abs(f_string); f_string > 0; n--, i++) {
                putc_oled(n, f_string % 10 + 48)
                f_string = f_string / 10
            }
        } else {
            putc_oled(1, 48)
            i = 1
        }
        puts_oled(xLocation(i, f_font, f_x), f_y, f_font, i, f_color)
    } else if (f_type == Oled) {
        putc_oled(1, f_string)
        puts_oled(f_x, f_y, f_font, 1, f_color)
    }
}

function getStringLength(offset) {
    stringLength = 0
    while (duint8(offset++)) { stringLength++ }
    return stringLength + 1
}

function xLocation(f_chars, f_font, f_x) {
    if (f_x == -3) { return 128 - ((f_chars * (7 + (f_font > 1) + f_font * 4)) + 3) }
    if (f_x == -2) { return 64 - ((f_chars * (7 + (f_font > 1) + f_font * 4)) / 2) }
    if (f_x == -1) { return 3 }
    return f_x
}

function find_digits(f_num) {
    for (n = 1; n < 11; n++) {
        if (!(abs(f_num) / pow(10, n))) {
            return n
            break
        }
    }
    return 1
}

function scheduleOledUpdate() {
    cls_oled(0)
    Update = TRUE
    OledClear = 10000
}

function clearOled() {
	OledClear = max(0, OledClear - get_rtime())
    if (OledClear) {
        if (OledClear <= get_rtime()) {
            cls_oled(0)
        }
    }
}

// endregion

// region SCRIPT SPECIFIC

function isRapidDoublePressRB() {
	if(event_press(XB1_RB)) {
		if (pressRBCount == 0) {
			pressRBCount = pressRBCount + 1
		} else if (get_ptime(XB1_RB) < 200) {
			pressRBCount = 0
			return TRUE
		}
	}
	
	if(get_val(XB1_RB) == 0 && get_ptime(XB1_RB) > 300) {
		pressRBCount = 0
	}
	
	return FALSE
}

function isRapidDoublePressRT() {
	if(event_press(XB1_RT)) {
		if (pressRTCount == 0) {
			pressRTCount = pressRTCount + 1
		} else if (get_ptime(XB1_RT) < 200) {
			pressRTCount = 0
			return TRUE
		}
	}
	
	if(get_val(XB1_RT) == 0 && get_ptime(XB1_RT) > 300) {
		pressRTCount = 0
	}
	
	return FALSE
}

function onSelectMenu() {
	isAutoWalkingY = FALSE
	toggleAutoRBSkill = FALSE
	toggleAutoRTSkill = FALSE
}

function onHomeMenu() {
	onSelectMenu()
}

function onStartMenu() {
	onSelectMenu()
}

function IS_WARRIOR() {
	return selectedClass == 1
}

function IS_TOGGLE() {
	return selectedMode == 1
}

function isToggleDrawBowMode() {
	return selectedMode == 0
}

function changeClass(direction) {
	selectedClass = (selectedClass + direction + 2) % 2
	scheduleOledUpdate()
	
	toggleAutoRBSkill = FALSE
	toggleAutoRTSkill = FALSE
}

function changeMode(direction) {
	selectedMode = (selectedMode + direction + 2) % 2
	scheduleOledUpdate()
}

function checkChangeClass() {
	if (!classChanged && !modeChanged) {
		if (isRightStickLeft() || isLeftStickLeft()) {
			changeClass(PREV)
			classChanged = TRUE
		} else if (isRightStickRight() || isLeftStickRight()) {
			changeClass(NEXT)
			classChanged = TRUE
		}
		
		if (classChanged) {
			doHome = FALSE
			if(isRightStickLeft() || isRightStickRight()) changedWithStick = XB1_RX
			else changedWithStick = XB1_LX
		}
	} else if (abs(get_ival(changedWithStick)) < DEADZONE) {
		classChanged = FALSE
	}
}

function checkChangeMode() {
	if (!modeChanged && !classChanged) {
		if (isRightStickUp() || isLeftStickUp()) {
			changeMode(NEXT)
			modeChanged = TRUE
		} else if (isRightStickDown() || isLeftStickDown()) {
			changeMode(PREV)
			modeChanged = TRUE
		}
		
		if (modeChanged) {
			doHome = FALSE
			if(isRightStickUp() || isRightStickDown()) modeChangedWithStick = XB1_RY
			else modeChangedWithStick = XB1_LY
			scheduleOledUpdate()
		}
	} else if (abs(get_ival(modeChangedWithStick)) < DEADZONE) {
		modeChanged = FALSE
	}
}

function updateOled() {
	if (Update) {
        paint(Classes[selectedClass], Center, 27, FontSmall, White, String)
		paint(Modes[selectedMode], Center, 37, FontSmall, White, String)
		Update = FALSE
    }
}

// endregion

// region COMBOS

combo auto_skill_abyx {
    // Order: X-LEFT, Y, B, A, UP, RIGHT, DOWN
    
    // Start
    wait(10)
    
    // Press X and LEFT Twice
    set_val(XB1_X, 100)
    set_val(XB1_LEFT, 100)
    wait(30)
    set_val(XB1_X, 0)
    set_val(XB1_LEFT, 0)
    wait(30)
    set_val(XB1_X, 100)
    set_val(XB1_LEFT, 100)
    wait(30)
    set_val(XB1_X, 0)
    set_val(XB1_LEFT, 0)
    wait(30)
    
    // Press Y Twice
    set_val(XB1_Y, 100)
    wait(30)
    set_val(XB1_Y, 0)
    wait(30)
    set_val(XB1_Y, 100)
    wait(30)
    set_val(XB1_Y, 0)
    wait(30)
    
    // Press B Twice
    set_val(XB1_B, 100)
    wait(30)
    set_val(XB1_B, 0)
    wait(30)
    set_val(XB1_B, 100)
    wait(30)
    set_val(XB1_B, 0)
    wait(30)
    
    // Press A Twice
    set_val(XB1_A, 100)
    wait(30)
    set_val(XB1_A, 0)
    wait(30)
    set_val(XB1_A, 100)
    wait(30)
    set_val(XB1_A, 0)
    wait(30)
    
    // Press UP Twice
    set_val(XB1_UP, 100)
    wait(30)
    set_val(XB1_UP, 0)
    wait(30)
    set_val(XB1_UP, 100)
    wait(30)
    set_val(XB1_UP, 0)
    wait(30)
    
    // Press RIGHT Twice
    set_val(XB1_RIGHT, 100)
    wait(30)
    set_val(XB1_RIGHT, 0)
    wait(30)
    set_val(XB1_RIGHT, 100)
    wait(30)
    set_val(XB1_RIGHT, 0)
    wait(30)
    
    // Press DOWN Twice
    set_val(XB1_DOWN, 100)
    wait(30)
    set_val(XB1_DOWN, 0)
    wait(30)
    set_val(XB1_DOWN, 100)
    wait(30)
    set_val(XB1_DOWN, 0)
    wait(30)
    
    // End
    wait(20)
}

combo l3 {
	set_val(XB1_LS, 100)
	wait(200)
	set_val(XB1_LS, 0)
}

combo a {
	wait(50)
	set_val(XB1_A, 0)
	wait(50)
	set_val(XB1_A, 100)
}

combo x {
	set_val(XB1_X, 100)
	wait(100)
}

combo OpenStartMenu {
	set_val(PRESS_START, 100)
	wait(200)
	set_val(PRESS_START, 0)
}

combo OpenSelectMenu {
	set_val(PRESS_SELECT, 100)
	wait(200)
	set_val(PRESS_SELECT, 0)
}

combo OpenHomeMenu {
	set_val(PRESS_HOME, 100)
	wait(200)
	set_val(PRESS_HOME, 0)
}

// endregion
