//|-------------------------------|
// Thu Apr 25 2019 12:02:29
// Script generated by GPC BLOCKLY
//|-------------------------------|

// UTILITIES
define FORWARD = -40;
define BACKWARD = 40;
define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;
define true = TRUE;
define false = FALSE;

// REMAPS
define PRESS_HOME = PS4_CIRCLE;
define GET_HOME = PS4_PS;

// PRESS HOME
unmap PS4_PS;
remap GET_HOME -> PS4_CROSS;

// define PRESS_L2 = TRACE_1;
// define GET_L2 = PS4_L2;
// 
// define PRESS_R2 = TRACE_2;
// define GET_R2 = PS4_R2;

// PRESS L2
// remap PS4_L2 -> PRESS_L2;
// remap PRESS_L2 -> PS4_L2;

// PRESS R2
// remap PS4_R2 -> PRESS_R2;
// remap PRESS_R2 -> PS4_R2;

remap PS4_CROSS -> PS4_CIRCLE;
remap PS4_CIRCLE -> PS4_CROSS;

int direction;
int doHome;
int isAutoWalking, walkDirection;

int isTouchpadTopLeftPressed, touchpadTopLeftPressed, touchpadTopLeftReleased;
int isTouchpadTopRightPressed, touchpadTopRightPressed, touchpadTopRightReleased;
int isTouchpadBottomLeftPressed, touchpadBottomLeftPressed, touchpadBottomLeftReleased;
int isTouchpadBottomRightPressed, touchpadBottomRightPressed, touchpadBottomRightReleased;
int isTouchpadLeftPressed, touchpadLeftPressed, touchpadLeftReleased;
int isTouchpadRightPressed, touchpadRightPressed, touchpadRightReleased;
int isTouchpadTopPressed, touchpadTopPressed, touchpadTopReleased;
int isTouchpadBottomPressed, touchpadBottomPressed, touchpadBottomReleased;

// PS4_FINGERX must be equal or greater than this value to be considered right
define touchpadRightStart = 0;

// PS4_FINGERY must be equal or greater than this value to be considered bottom
define touchpadBottomStart = 20;

init {
	doHome = TRUE;
	direction = -1;
}

main {
    // calibrate the triggers	
    adt_off(PS5_L2);
    adt_off(PS5_R2);
	
	set_left_triggers_threshold(40);
    set_right_triggers_threshold(100, 40);

    // split the touchpad events into 4 directions 
    // (top-left, top-right, bottom-left, bottom-right)
    if(event_press(PS5_FINGER1)) {
        if(get_val(PS4_FINGER1X) >= touchpadRightStart) {
            isTouchpadRightPressed = TRUE;
            touchpadRightPressed = TRUE;

            if(get_val(PS4_FINGER1Y) >= touchpadBottomStart) {
                isTouchpadBottomPressed = TRUE;
                touchpadBottomPressed = TRUE;

                isTouchpadBottomRightPressed = TRUE;
                touchpadBottomRightPressed = TRUE;
            } else {
                isTouchpadTopPressed = TRUE;
                touchpadTopPressed = TRUE;

                isTouchpadTopRightPressed = TRUE;
                touchpadTopRightPressed = TRUE;
            }
        } else {
            isTouchpadLeftPressed = TRUE;
            touchpadLeftPressed = TRUE;

            if(get_val(PS4_FINGER1Y) >= touchpadBottomStart) {
                isTouchpadBottomPressed = TRUE;
                touchpadBottomPressed = TRUE;

                isTouchpadBottomLeftPressed = TRUE;
                touchpadBottomLeftPressed = TRUE;
            } else {
                isTouchpadTopPressed = TRUE;
                touchpadTopPressed = TRUE;

                isTouchpadTopLeftPressed = TRUE;
                touchpadTopLeftPressed = TRUE;
            }
        }
    } else if(event_release(PS5_FINGER1)) {
        if(isTouchpadRightPressed) {
            isTouchpadRightPressed = FALSE;
            touchpadRightReleased = TRUE;
        }
        if(isTouchpadLeftPressed) {
            isTouchpadLeftPressed = FALSE;
            touchpadLeftReleased = TRUE;
        }
        if(isTouchpadTopPressed) {
            isTouchpadTopPressed = FALSE;
            touchpadTopReleased = TRUE;
        }
        if(isTouchpadBottomPressed) {
            isTouchpadBottomPressed = FALSE;
            touchpadBottomReleased = TRUE;
        }
        if(isTouchpadTopLeftPressed) {
            isTouchpadTopLeftPressed = FALSE;
            touchpadTopLeftReleased = TRUE;
        }
        if(isTouchpadTopRightPressed) {
            isTouchpadTopRightPressed = FALSE;
            touchpadTopRightReleased = TRUE;
        }
        if(isTouchpadBottomLeftPressed) {
            isTouchpadBottomLeftPressed = FALSE;
            touchpadBottomLeftReleased = TRUE;
        }
        if(isTouchpadBottomRightPressed) {
            isTouchpadBottomRightPressed = FALSE;
            touchpadBottomRightReleased = TRUE;
        }
    }

    // Auto Run
	if (isAutoWalking) {
		if(event_press(GET_HOME)){
			combo_run(l3);
		}
	}

    // Auto Walk
	if(isAutoWalking) {
		if((walkDirection == DIR_FORWARD && isLeftAxisBackward(60)) 
			|| (walkDirection == DIR_BACKWARD && get_val(PS3_LY) < -60)) {
			isAutoWalking = FALSE;
		} else {
			set_val(XB1_LY, 100 * walkDirection);
		}
	} else {
		if (isMultiPressStickAnyDirection(GET_HOME, PS3_LY, 30)) {
			isAutoWalking = TRUE;
			walkDirection = getDirection(PS3_LY);
		}
	}

    // touchpad actions
    if(isTouchpadTopRightPressed) {
        set_val(PS4_CROSS, 100)
    }

    if(isTouchpadBottomRightPressed) {
        set_val(PS4_SQUARE, 100)
    }

    // HOME HOTKEY + BUTTON
	if (event_release(GET_HOME)) {
		if (doHome) {
			doHome = FALSE;
			combo_run(home);
		} else {
			if (!isAutoWalking) set_val(PRESS_HOME, 100)
		}
	} else if (get_val(GET_HOME) == 100) {
		if (get_ptime(GET_HOME) > 400 && FALSE) {
			doHome = TRUE;
		} else {
			if (!isAutoWalking) {
				set_val(PRESS_HOME, 100)
			}
		}
	}

    // after all the stuff is done, cleanup temporary variables
    touchpadTopPressed = FALSE;
    touchpadTopReleased = FALSE;
    touchpadBottomPressed = FALSE;
    touchpadBottomReleased = FALSE;
    touchpadLeftPressed = FALSE;
    touchpadLeftReleased = FALSE;
    touchpadRightPressed = FALSE;
    touchpadRightReleased = FALSE;
    touchpadTopLeftPressed = FALSE;
    touchpadTopLeftReleased = FALSE;
    touchpadTopRightPressed = FALSE;
    touchpadTopRightReleased = FALSE;
    touchpadBottomLeftPressed = FALSE;
    touchpadBottomLeftReleased = FALSE;
    touchpadBottomRightPressed = FALSE;
    touchpadBottomRightReleased = FALSE;
}

function finger_trigger_left_analog(tolerance) {
    if(get_val(PS4_LY) > tolerance) {
        set_val(PS4_LY, 100)
    } else if(get_val(PS4_LY) < -tolerance) {
        set_val(PS4_LY, -100)
    }
    if(get_val(PS4_LX) > tolerance) {
        set_val(PS4_LX, 100)
    } else if(get_val(PS4_LX) < -tolerance) {
        set_val(PS4_LX, -100)
    }
}

function set_left_triggers_threshold(threshold) {
    if(get_val(PS4_L1) < threshold) set_val(PS4_L1, 0) else set_val(PS4_L1, 100)
	if(get_val(PS4_L2) < threshold) set_val(PS4_L2, 0) else set_val(PS4_L2, 100)
}

function set_right_triggers_threshold(threshold, threshold_small) {
    // if PS4_L2 is pressed(aiming), the threshold is smaller
    if(get_val(PS4_L2) > threshold) {
        threshold = threshold_small
    }

	if(get_val(PS4_R1) < threshold) set_val(PS4_R1, 0) else set_val(PS4_R1, 100)
	if(get_val(PS4_R2) < threshold) set_val(PS4_R2, 0) else set_val(PS4_R2, 100)
}

// region USEFUL FUNCTIONS
function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1;
	} else if (get_val(stick) < 0) {
		return -1;
	}

	return 0;
}

function isLeftAxisForward(min_intensity) {
	return get_val(PS3_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(PS3_LY) >= min_intensity
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE;
	}

	return FALSE;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && abs(get_val(stick)) >= sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt);
	}

	return 0;
}
// endregion

// COMBOS
combo home {
    set_val(PRESS_HOME, 100);
    wait(200); 
    set_val(PRESS_HOME, 0);
}

combo l3 {
    set_val(PS4_L3, 100);
    wait(200); 
} ���������������� ���������������� ���������������� ���������������� ����������������