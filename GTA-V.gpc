//|-------------------------------|
// Thu Apr 25 2019 12:02:29
// Script generated by GPC BLOCKLY
//|-------------------------------|

define FORWARD = -40;
define BACKWARD = 40;

define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;

int doStart, doCrouch, doPS, doEagle;
int toggle, taps, tapExpire;
int toggle2, taps2, tapExpire2, isAutoAiming, isAutoDriving, isAutoFastDriving;
int isAutoWalking, isAutoRunning, isToggleX;
int disableR1, disableL1;
int isAutoAimJustStarted, isDoContinueAutoAim;

remap PS3_START -> XB1_PR2;
remap XB1_PR2 -> PS3_START;

remap PS3_PS -> XB1_PR1;
remap XB1_PR1 -> PS3_PS;

remap PS3_L1 -> PS3_L2;
remap PS3_L2 -> PS3_L1;

remap PS3_R2 -> PS3_R1;
remap PS3_R1 -> PS3_R2;

init {
	doStart = TRUE;
}

main {
	if(get_val(PS3_L1)) set_val(PS3_L1, 100);
	if(get_val(PS3_L2)) set_val(PS3_L2, 100);
	if(get_val(PS3_R1)) set_val(PS3_R1, 100);
	if(get_val(PS3_R2)) set_val(PS3_R2, 100);

	// Auto Aim
	if(toggleAutoAimOnDoublePress(300)) {
		//swap(TRACE_1, PS3_L1);
		swap(PS3_R1, TRACE_1);
		if(event_press(TRACE_1)) { // L1 released for the first time after aim started
			isAutoAimJustStarted = FALSE;
		}

		// Auto Snipe
		if(get_val(TRACE_1) && isAutoAimJustStarted == FALSE){ // Snipe Button Pressed
			isDoContinueAutoAim = FALSE;
		}
	}

	if(isMultiPress(PS3_START, PS3_L1)) {
		hotkeyPressed();
		disableL1 = TRUE;
		combo_run(stealth);
	}
	if(disableL1) {
		if(event_release(PS3_L1)) {
			disableL1 = FALSE;
		}
		set_val(PS3_L1, 0);
	}

	// Toggle Hold X for Auto Follow
	if(isToggleX) {
		if(event_press(PS3_CROSS) || get_val(PS3_LY) > 50) {
			isToggleX = FALSE;
			combo_stop(hold_x)
		} else {
			combo_run(hold_x);
		}
	} else if (isMultiPress(PS3_START, PS3_CROSS)) {
		isToggleX = TRUE;
		hotkeyPressed();
		combo_run(hold_x);
	}

	if(toggleRapidXOnDoublePress(180) || isAutoRunning) {
		if(isLeftAxisBackward(50)) {
			isAutoRunning = FALSE;
		} else {
			if(!isWaitWalkAndRun()) { combo_run(RapidX); }
		}
	}

	// Auto Run
	if (isAutoWalking && isMultiPressStickForward(PS3_START, PS3_LY, -30)) {
		isAutoRunning = TRUE;
		hotkeyPressed();
	}

	// Toggle Auto Walk
	if(isAutoWalking) {
		if(isLeftAxisBackward(50)) {
			isAutoWalking = FALSE;
			isAutoRunning = FALSE;
		} else {
			if(!isWaitWalkAndRun()) { set_val(PS3_LY, -100); }
		}
	} else if (isMultiPressStickForward(PS3_START, PS3_LY, -30)) {
		isAutoWalking = TRUE;
		hotkeyPressed();
	}

	// Auto Fast Drive
	if (isAutoDriving && !isAutoFastDriving && isMultiPressStickForward(PS3_PS, PS3_LY, -30)) {
		isAutoFastDriving = TRUE;
		doPS = FALSE;
		doEagle = FALSE;
	} else if (isLeftAxisBackward(50) ||  event_press(PS3_L1)) {
		isAutoFastDriving = FALSE;	
	}


	// Toggle Auto Drive
	if(isAutoDriving) {
		if(isMultiPressStickBackward(PS3_PS, PS3_LY, 30) || event_press(PS3_TRIANGLE)) {
			isAutoDriving = FALSE;
		} else {
			if (!isAutoFastDriving) {
				if(get_val(PS3_R1) < 50) set_val(PS3_R1, 50);
			} else {
				set_val(PS3_R1, 100);
			}
		}
	} else if (isMultiPressStickForward(PS3_PS, PS3_LY, -30)) {
		isAutoDriving = TRUE;
		doPS = FALSE;
		doEagle = FALSE;
	}

	if (event_release(PS3_START)) {
		if (doCrouch) {
			if(doStart) {
				combo_run(start);
				combo_stop(hold_x);
				isAutoRunning = FALSE;
				isAutoWalking = FALSE;
				isToggleX = FALSE;
				doStart = FALSE;
			} else {
				combo_run(stealth);
				isAutoDriving = FALSE;
			}
		} else {
			doCrouch = TRUE;
		}
	} if (doCrouch && get_val(PS3_START) == 100 && get_ptime(PS3_START) > 400) {
		doStart = TRUE;
	}

	if (event_release(PS3_PS)) {
		if (doPS) {
			combo_run(xbox);
			combo_stop(hold_x);
			isAutoRunning = FALSE;
			isAutoWalking = FALSE;
			isToggleX = FALSE;
			doPS = FALSE;
		} else {
			if(doEagle) combo_run(eagle);
			else doEagle = TRUE; 
		}
	} else if (get_val(PS3_PS) == 100 && get_ptime(PS3_PS) > 400) {
		doPS = TRUE;
	}
}

function hotkeyPressed() {
	doStart = FALSE;
	doCrouch = FALSE;
}

function isStopWalkAndRun() {
	if (event_press(PS3_L1) || event_press(PS3_R1)) {
		return TRUE;
	}
	
	return FALSE;
}

function isWaitWalkAndRun() {
	if (get_val(PS3_SQUARE) > 20 || get_val(PS3_TRIANGLE) > 20) {
		return TRUE;
	}
	
	return FALSE;
}

function isLeftAxisForward(min_intensity) {
	return get_val(PS3_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(PS3_LY) >= min_intensity
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE;
	}

	return FALSE;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickBackward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) > sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function toggleRapidXOnDoublePress(doublePressSpeed) {
	if(tapExpire > 0) {
		tapExpire = tapExpire - get_rtime();
		if (tapExpire <= 0) {
			taps = 0;
		}
	}
	if(!isAutoRunning && event_press(PS3_CROSS)) {
		taps = taps + 1;
		tapExpire = doublePressSpeed;
	}
	if(!isAutoRunning && taps >= 2) {
		isAutoRunning = TRUE; //make isAutoRunning_00 true if false, false if true
		tapExpire = 0;
		taps = 0;
	} else {
		if (isAutoRunning && event_press(PS3_CROSS) ) {
			isAutoRunning = FALSE;
			taps = 0;
		}
	}

	return isAutoRunning;
}

function toggleAutoAimOnDoublePress(doublePressSpeed) {
	if(tapExpire > 0) {
		tapExpire = tapExpire - get_rtime();
		if (tapExpire <= 0) {
			taps = 0;
		}
	}
	if(!isAutoAiming && event_press(PS3_R1)) {
		taps = taps + 1;
		tapExpire = doublePressSpeed;
	}
	if(!isAutoAiming && taps >= 2) {
		isAutoAiming = TRUE; //make isAutoRunning_00 true if false, false if true
		isAutoAimJustStarted = TRUE;
		isDoContinueAutoAim = TRUE;
		combo_run(eagle);
		tapExpire = 0;
		taps = 0;
	} else {
		if (isAutoAiming && !isDoContinueAutoAim && event_release(TRACE_1)) {
			isAutoAiming = FALSE;
			taps = 0;
		}
	}

	return isAutoAiming;
}

combo r3 {
    set_val(PS3_R3, 100); // Press X / Square to reload
    wait(200);  // Press X / Square for 200ms
}

combo xbox {
    set_val(XB1_PR1, 100);
    wait(200); 
}

combo start {
    set_val(XB1_PR2, 100);
    wait(200); 
    set_val(XB1_PR2, 0);
}

combo stealth {
    set_val(PS3_L3, 100);
    wait(200);
}

combo eagle
{
    set_val(PS3_R3, 100);
    set_val(PS3_L3, 100);
    wait(200);
}

combo hold_x {
    set_val(PS3_CROSS, 100); // Press X / Square to reload
    wait(4000);  // Press X / Square for 200ms
    set_val(PS3_CROSS, 100);
    wait(4000);
    set_val(PS3_CROSS, 100);
    wait(4000);
}

combo RapidX {
    set_val(PS3_CROSS, 100);
    wait(40);
    set_val(PS3_CROSS, 0);
    wait(40);
    set_val(PS3_CROSS, 100);
    wait(40);
    set_val(PS3_CROSS, 0);
}


    //if((get_val(PS3_R1)) && (get_ptime(PS3_R1)) <= 1500) {
    //    set_val(PS3_CIRCLE, 100);
    //}
