//|-------------------------------|
// Thu Apr 25 2019 12:02:29
// Script generated by GPC BLOCKLY
//
// PS5 button should map to PRESS_START
//
//|-------------------------------|

// UTILITIES
define FORWARD = -40;
define BACKWARD = 40;
define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;

int doHome;
int walkDirection;
int isRSDirectional;
int isAutoWalking;
int isRapidCircle;
int isRapidCirclePaused;
int skipL2;

int isTouchpadTopLeftPressed, touchpadTopLeftPressed, touchpadTopLeftReleased;
int isTouchpadTopRightPressed, touchpadTopRightPressed, touchpadTopRightReleased;
int isTouchpadBottomLeftPressed, touchpadBottomLeftPressed, touchpadBottomLeftReleased;
int isTouchpadBottomRightPressed, touchpadBottomRightPressed, touchpadBottomRightReleased;
int isTouchpadLeftPressed, touchpadLeftPressed, touchpadLeftReleased;
int isTouchpadRightPressed, touchpadRightPressed, touchpadRightReleased;
int isTouchpadTopPressed, touchpadTopPressed, touchpadTopReleased;
int isTouchpadBottomPressed, touchpadBottomPressed, touchpadBottomReleased;

// PS5_FINGERX must be equal or greater than this value to be considered right
define touchpadRightStart = 0;

// PS5_FINGERY must be equal or greater than this value to be considered bottom
define touchpadBottomStart = 20;

// REMAPS
define BTN_START = PS5_CROSS;
define PRESS_SELECT = PS5_SHARE;
define PRESS_START = PS5_OPTIONS;
define PRESS_HOME = PS5_CROSS;
define PRESS_L2 = XB1_PR1;
define PRESS_R2 = PS5_R2;
define PRESS_CROSS = PS5_CROSS;

define GET_SELECT = PS5_SHARE;
define GET_START = PS5_OPTIONS;
define GET_HOME = PS5_PS;
define GET_CROSS = PS5_CROSS;
define GET_L1 = PS5_L1;
define GET_L2 = PS5_L2;
define GET_R2 = PS5_R2;

// PRESS START
// remap XB1_MENU -> PRESS_START;
// remap PRESS_START -> XB1_MENU;

// PRESS SELECT
// remap XB1_VIEW -> PRESS_SELECT;
// remap PRESS_SELECT -> XB1_VIEW;

// PRESS HOME
unmap PS5_PS;

// PRESS L2
remap PS5_L2 -> PRESS_L2;
remap PRESS_L2 -> PS5_L2;

remap PS5_L2 -> PS5_L1;
remap PS5_L1 -> PS5_L2;


// PRESS R2
remap PS5_R2 -> PS5_R1;
remap PS5_R1 -> PS5_R2;

init {
    walkDirection = -1;
}

main {
    // Adjust Sticks
    set_val(PS5_RX, useDeadzone(PS5_RX, 10))
    set_val(PS5_RY, useDeadzone(PS5_RY, 10))
    set_val(PS5_LX, useDeadzone(PS5_LX, 10))
    set_val(PS5_LY, useDeadzone(PS5_LY, 10))

    finger_trigger_left_analog(10);
    finger_trigger_right_analog(10);

    // Ajdust Triggers
    adt_off(PS5_L2);
    adt_off(PS5_R2);
	set_left_triggers_threshold(40);
    set_right_triggers_threshold(40, 40);

    // region split the touchpad events into 4 directions 
    // (top-left, top-right, bottom-left, bottom-right)
    if(event_press(PS5_FINGER1)) {
        if(get_val(PS5_FINGER1X) >= touchpadRightStart) {
            isTouchpadRightPressed = TRUE;
            touchpadRightPressed = TRUE;

            if(get_val(PS5_FINGER1Y) >= touchpadBottomStart) {
                isTouchpadBottomPressed = TRUE;
                touchpadBottomPressed = TRUE;

                isTouchpadBottomRightPressed = TRUE;
                touchpadBottomRightPressed = TRUE;
            } else {
                isTouchpadTopPressed = TRUE;
                touchpadTopPressed = TRUE;

                isTouchpadTopRightPressed = TRUE;
                touchpadTopRightPressed = TRUE;
            }
        } else {
            isTouchpadLeftPressed = TRUE;
            touchpadLeftPressed = TRUE;

            if(get_val(PS5_FINGER1Y) >= touchpadBottomStart) {
                isTouchpadBottomPressed = TRUE;
                touchpadBottomPressed = TRUE;

                isTouchpadBottomLeftPressed = TRUE;
                touchpadBottomLeftPressed = TRUE;
            } else {
                isTouchpadTopPressed = TRUE;
                touchpadTopPressed = TRUE;

                isTouchpadTopLeftPressed = TRUE;
                touchpadTopLeftPressed = TRUE;
            }
        }
    } else if(event_release(PS5_FINGER1)) {
        if(isTouchpadRightPressed) {
            isTouchpadRightPressed = FALSE;
            touchpadRightReleased = TRUE;
        }
        if(isTouchpadLeftPressed) {
            isTouchpadLeftPressed = FALSE;
            touchpadLeftReleased = TRUE;
        }
        if(isTouchpadTopPressed) {
            isTouchpadTopPressed = FALSE;
            touchpadTopReleased = TRUE;
        }
        if(isTouchpadBottomPressed) {
            isTouchpadBottomPressed = FALSE;
            touchpadBottomReleased = TRUE;
        }
        if(isTouchpadTopLeftPressed) {
            isTouchpadTopLeftPressed = FALSE;
            touchpadTopLeftReleased = TRUE;
        }
        if(isTouchpadTopRightPressed) {
            isTouchpadTopRightPressed = FALSE;
            touchpadTopRightReleased = TRUE;
        }
        if(isTouchpadBottomLeftPressed) {
            isTouchpadBottomLeftPressed = FALSE;
            touchpadBottomLeftReleased = TRUE;
        }
        if(isTouchpadBottomRightPressed) {
            isTouchpadBottomRightPressed = FALSE;
            touchpadBottomRightReleased = TRUE;
        }
    }
    // endregion

    // region Toggle RS Directional
    if(isRSDirectional) {
        if (event_press(PS5_R3)) {
            isRSDirectional = FALSE;
        } else {
            if(get_val(PS5_RX) < -30) {
                set_val(PS5_RX, 0);
                set_val(PS5_LEFT, 100);
            } else if(get_val(PS5_RX) > 30) {
                set_val(PS5_RX, 0);
                set_val(PS5_RIGHT, 100);
            } else if(get_val(PS5_RY) < -30) {
                set_val(PS5_RY, 0);
                set_val(PS5_UP, 100);
            } else if(get_val(PS5_RY) > 30) {
                set_val(PS5_RY, 0);
                set_val(PS5_DOWN, 100);
            }
        }
    } else if(event_press(PS5_R3)) {
        isRSDirectional = TRUE;
    }
    // endregion

    // touchpad actions
    if(touchpadTopRightPressed) {
        combo_run(circle);
    }

    if(touchpadBottomRightPressed) {
        combo_run(square);
    }

    // region Auto Walk
    if(isAutoWalking) {
        if(event_press(GET_HOME)){
            // Auto Run
            combo_run(rb);
            hotkeyPressed();
        }

        if((walkDirection == DIR_FORWARD && isLeftAxisBackward(60)) 
            || (walkDirection == DIR_BACKWARD && get_val(PS5_LY) < -60)) {
            isAutoWalking = FALSE;
        } else {
            set_val(PS5_LY, 100 * walkDirection);
        }
    } else {
        if (isMultiPressStickAnyDirection(GET_HOME, PS5_LY, 30)) {
            isAutoWalking = TRUE;
            walkDirection = getDirection(PS5_LY);
            hotkeyPressed();
        }
    }
    // endregion

    // regio Rapid Press Circle on L2 + Circle
    if (isMultiPress(PS5_CIRCLE, GET_L2)) {
        isRapidCircle = TRUE;
        isRapidCirclePaused = FALSE;
        skipL2 = TRUE;
    }
    if (isRapidCircle) {
        // Pause when holding R2
        if (isRapidCirclePaused) {
            // Unpause when R2 or Triangle is released
            if (event_release(PS5_R2) || event_release(PS5_TRIANGLE)) {
                isRapidCirclePaused = FALSE;
            }
        } else {
            // Pause when R2 is pressed
            if (event_press(PS5_R2)) {
                isRapidCirclePaused = TRUE;
                combo_stop(circle);
            }
        }
        if(!isRapidCirclePaused) {
            // Disable when not paused and Square or L2 or Cross is pressed
            if (event_press(PS5_SQUARE) || event_press(GET_L2) || event_press(PS5_CROSS) || event_press(GET_START)) {
                isRapidCircle = FALSE;
            }

            combo_run(circle);
        }
    }

    if (event_release(GET_L2)) {
        if (!skipL2) {
            combo_run(l2);
        } else {
            skipL2 = FALSE;
        }
    }
    // endregion
    
    // region HOME HOTKEY + BUTTON
    if (event_release(GET_HOME)) {
        if (doHome) {
            doHome = FALSE;
            onHomeMenu();
            combo_run(home);
        } else {
            if (!isAutoWalking) set_val(PRESS_HOME, 100)
        }
    } else if (get_val(GET_HOME) == 100) {
        if (get_ptime(GET_HOME) > 400 && FALSE) {
            doHome = TRUE;
        } else {
            if (!isAutoWalking) {
                set_val(PRESS_HOME, 100)
            }
        }
    }
    // endregion

    // region AFTER ALL
    // after all the stuff is done, cleanup temporary variables
    touchpadTopPressed = FALSE;
    touchpadTopReleased = FALSE;
    touchpadBottomPressed = FALSE;
    touchpadBottomReleased = FALSE;
    touchpadLeftPressed = FALSE;
    touchpadLeftReleased = FALSE;
    touchpadRightPressed = FALSE;
    touchpadRightReleased = FALSE;
    touchpadTopLeftPressed = FALSE;
    touchpadTopLeftReleased = FALSE;
    touchpadTopRightPressed = FALSE;
    touchpadTopRightReleased = FALSE;
    touchpadBottomLeftPressed = FALSE;
    touchpadBottomLeftReleased = FALSE;
    touchpadBottomRightPressed = FALSE;
    touchpadBottomRightReleased = FALSE;
    // endregion
}

function onStartMenu() {
    return 0;
}

function onSelectMenu() {
    return 0;
}

function onHomeMenu() {
    return 0;
}

function getDirection(stick) {
    if(get_val(stick) > 0) {
        return 1;
    } else if (get_val(stick) < 0) {
        return -1;
    }

    return 0;
}

function isLeftAxisForward(min_intensity) {
    return get_val(PS5_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
    return get_val(PS5_LY) >= min_intensity
}

function hotkeyPressed() {
    doHome = FALSE;
}

function isRapidMultiPress(btA, btB) {
    if(event_press(btA) && get_ptime(btB) <= 100 ||
        event_press(btB) && get_ptime(btA) <= 100){
        return TRUE;
    }

    return FALSE;
}

function isMultiPress(btA, btB) {
    if((event_press(btB) && get_val(btA) > 0)
     || (event_press(btA) && get_val(btB) > 0)) {
        return TRUE;
    }

    return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
    if(event_press(bt) && get_val(stick) < sensitivity) {
        return TRUE;
    }

    return FALSE;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
    if(event_press(bt) && abs(get_val(stick)) >= sensitivity) {
        return TRUE;
    }

    return FALSE;
}

function useDeadzone(bt, deadzone) {
    if(abs(get_val(bt)) >= deadzone) {
        return get_val(bt);
    }

    return 0;
}

function finger_trigger_left_analog(tolerance) {
    if(get_val(PS5_LY) > tolerance) {
        set_val(PS5_LY, 100)
    } else if(get_val(PS5_LY) < -tolerance) {
        set_val(PS5_LY, -100)
    }
    if(get_val(PS5_LX) > tolerance) {
        set_val(PS5_LX, 100)
    } else if(get_val(PS5_LX) < -tolerance) {
        set_val(PS5_LX, -100)
    }
}

function finger_trigger_right_analog(tolerance) {
    if(get_val(PS5_RY) > tolerance) {
        set_val(PS5_RY, 100)
    } else if(get_val(PS5_RY) < -tolerance) {
        set_val(PS5_RY, -100)
    }
    if(get_val(PS5_RX) > tolerance) {
        set_val(PS5_RX, 100)
    } else if(get_val(PS5_RX) < -tolerance) {
        set_val(PS5_RX, -100)
    }
}

function set_left_triggers_threshold(threshold) {
    if(get_val(PS4_L1) < threshold) set_val(PS4_L1, 0) else set_val(PS4_L1, 100)
	if(get_val(PS4_L2) < threshold) set_val(PS4_L2, 0) else set_val(PS4_L2, 100)
}

function set_right_triggers_threshold(threshold, threshold_small) {
    // if PS4_L2 is pressed(aiming), the threshold is smaller
    if(get_val(PS4_L2) > threshold) {
        threshold = threshold_small
    }

	if(get_val(PS4_R1) < threshold) set_val(PS4_R1, 0) else set_val(PS4_R1, 100)
	if(get_val(PS4_R2) < threshold) set_val(PS4_R2, 0) else set_val(PS4_R2, 100)
}

combo toggle_lights {
    set_val(PS5_R3, 100);
    wait(1000);
}

combo r3 {
    set_val(PS5_R3, 100); // Press X / Square to reload
    wait(200);  // Press X / Square for 200ms
}

combo l3 {
    set_val(PS5_L3, 100);
    wait(200); 
}

combo rb {
    set_val(PS5_R2, 100);
    wait(200); 
}

combo l2 {
    set_val(PRESS_L2, 100);
    wait(100);
    set_val(PRESS_L2, 0);
}

combo circle {
    set_val(PS5_CIRCLE, 100);
    wait(100); 
}

combo square {
    set_val(PS5_SQUARE, 100);
    wait(100); 
}

combo ps {
    set_val(PS5_R1, 100);
    wait(200); 
}

combo start {
    set_val(PRESS_START, 100);
    wait(200); 
    set_val(PRESS_START, 0);
}

combo home {
    set_val(PRESS_HOME, 100);
    wait(200); 
    set_val(PRESS_HOME, 0);
}

combo snipe {
    set_val(PS5_L3, 100);
    wait(500);
}
 ���������������� ���������������� ���������������� ���������������� ���������������� ���������������� ����������������