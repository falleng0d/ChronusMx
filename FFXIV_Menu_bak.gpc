//|-------------------------------|
// Thu Apr 25 2019 12:02:29
// Script generated by GPC BLOCKLY
//|-------------------------------|

// UTILITIES
define FORWARD = -40;
define BACKWARD = 40;
define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;
define true = TRUE;
define false = FALSE;

// REMAPS
define BTN_START = XB1_B;
define PRESS_SELECT = XB1_PR2;
define PRESS_START = XB1_PR1;
define PRESS_HOME = XB1_XBOX;
define PRESS_RT = XB1_PL2;
define PRESS_ATACK = XB1_RT;
define PRESS_DEFEND = XB1_LB;

define GET_RT = XB1_RT;
define GET_SELECT = XB1_VIEW;
define GET_START = XB1_MENU;
define GET_HOME = XB1_XBOX;
define GET_ATACK = XB1_RT;
define GET_DEFEND = XB1_LB;

// AUTO ATACK XB1_B
define BTN_AUTO_ATACK_TMP_1 = TRACE_1;
int tapExpire, isAutoAtacking, taps, t, t2, isSniping
define BTN_AUTO_DEFEND_TMP_1 = XB1_PR1;
int defTapExpire, isAutoDefending, defTaps, defT, defT2, defIsSniping
int blockStart;
int toggleDirectionalAxis;

int isAttackReleaseEvent, isAttackPressEvent, AttackLastValue

// OTHERS
int walkDirectionY, isAutoWalkingY;
int doStart, doSelect, doHome, blockRTPressCombo, selectPressIgnore;

int isHoldingY, isComboRelease;

int rbPressIgnore, rbPressedTime;
int lbPressIgnore, lbPressedTime;

int isCombatMode;

/*remap XB1_MENU -> XB1_B;
remap XB1_B -> XB1_MENU;*/

unmap XB1_XBOX;
// remap XB1_PL1 -> XB1_XBOX;

remap PS3_START -> PRESS_START;
remap PRESS_START -> PS3_START;

remap PS3_SELECT -> PRESS_SELECT;
remap PRESS_SELECT -> PS3_SELECT;

init {

}

main {	
	set_val(XB1_RX, useDeadzone(XB1_RX, 15))
	set_val(XB1_RY, useDeadzone(XB1_RY, 10))
	set_val(XB1_LX, useDeadzone(XB1_LX, 22))
	set_val(XB1_LY, useDeadzone(XB1_LY, 10))
	if(get_val(PS3_L1)) set_val(PS3_L1, 100);
	if(get_val(PS3_L2)) set_val(PS3_L2, 100);
	if(get_val(PS3_R1)) set_val(PS3_R1, 100);
	if(get_val(PS3_R2)) set_val(PS3_R2, 100);

	if(event_press(XB1_DOWN) && get_ptime(XB1_DOWN) > 400) {
		load_slot(get_slot() + 1);
	}

	if(event_release(XB1_RB)) {
		if (!rbPressIgnore) {
			if(rbPressedTime < 400) {
				combo_run(press_a);
			} else {
				combo_run(press_rb);
			}
		}
		rbPressIgnore = false;
		rbPressedTime = 0;
		
	} else {
		rbPressedTime = get_ptime(XB1_RB);
		swap(XB1_PL2, XB1_RB);
	}

	if(event_release(XB1_LB)) {
		if (!lbPressIgnore) {
			if(lbPressedTime < 400) {
				combo_run(press_b);
			} else {
				combo_run(press_lb);
			}
		}
		lbPressIgnore = false;
		lbPressedTime = 0;
		
	} else {
		lbPressedTime = get_ptime(XB1_LB);
		swap(XB1_PL2, XB1_LB);
	}

	if(toggleDirectionalAxis) {
		if (event_press(XB1_XBOX) || event_press(XB1_Y) || event_press(GET_START)) {
			toggleDirectionalAxis = FALSE;
			set_val(GET_START, 0);
		} else {
			if(get_val(PS3_LX) < -30) {
				set_val(PS3_LX, 0);
				set_val(PS3_LEFT, 100);
			} else if(get_val(PS3_LX) > 30) {
				set_val(PS3_LX, 0);
				set_val(PS3_RIGHT, 100);
			} else if(get_val(PS3_LY) < -30) {
				set_val(PS3_LY, 0);
				set_val(PS3_UP, 100);
			} else if(get_val(PS3_LY) > 30) {
				set_val(PS3_LY, 0);
				set_val(PS3_DOWN, 100);
			}
		}
	} else if(event_press(XB1_XBOX)) {
		toggleDirectionalAxis = TRUE;
	}


	// Rapid Look Arroud
	if(get_val(PS3_RY) > 13) {
		set_val(PS3_RY, upto(0, max(get_val(PS3_RY),65), 75, get_val(PS3_RY)))
	} else if(get_val(PS3_RY) < -13) {
		set_val(PS3_RY, upto(0, min(get_val(PS3_RY),-65), -75, get_val(PS3_RY)))
	}
	if(get_val(PS3_RX) > 13) {
		set_val(PS3_RX, upto(0, max(get_val(PS3_RX),65), 75, get_val(PS3_RX)))
	} else if(get_val(PS3_RX) < -13) {
		set_val(PS3_RX, upto(0, min(get_val(PS3_RX),-65), -75, get_val(PS3_RX)))
	}

	if(get_val(PS3_LY) > 13) {
		set_val(PS3_LY, upto(0, min(2*get_val(PS3_LY),100), 95, get_val(PS3_LY)))
	} else if(get_val(PS3_LY) < -13) {
		set_val(PS3_LY, upto(0, max(2*get_val(PS3_LY),-100), -95, get_val(PS3_LY)))
	}
	if(get_val(PS3_LX) > 25) {
		set_val(PS3_LX, upto(0, min(2*get_val(PS3_LX),100), 95, get_val(PS3_LX)))
	} else if(get_val(PS3_LX) < -13) {
		set_val(PS3_LX, upto(0, max(2*get_val(PS3_LX),-100), -95, get_val(PS3_LX)))
	}

	// Auto Atack
	if(toggleAutoAtackOnDoublePress(300, isAttackReleaseEvent)) {
		swap(GET_ATACK, BTN_AUTO_ATACK_TMP_1);
		combo_run(RapidAtackCombo);
		
		if(!get_val(BTN_AUTO_ATACK_TMP_1)) {
			t = false
		}

		if(get_val(BTN_AUTO_ATACK_TMP_1)){
			if(get_ptime(BTN_AUTO_ATACK_TMP_1) < 600 && t == false){
				t2 = false;
			} else { t2 = true; }
			// if (t == false) { combo_run(power_attack_r); }
		} else {
			// combo_stop(power_attack_r);
			isSniping = t2
		}
	}

	// Attack Events
	isAttackReleaseEvent = false;
	isAttackPressEvent = false;
	if(AttackLastValue == 0 && get_val(GET_ATACK) > 0) {
		isAttackPressEvent = true;
	}
	if(AttackLastValue > 0 && get_val(GET_ATACK) == 0) {
		isAttackReleaseEvent = true;
		combo_run(trace)
	}
	AttackLastValue = get_val(GET_ATACK);

	// Auto Defend
	/*if(toggleAutoDefendOnDoublePress(300, isPr1ReleaseEvent)) {
		swap(GET_DEFEND, BTN_AUTO_DEFEND_TMP_1);
		// if(!get_val(GET_ATACK)) {
		// 	set_val(PRESS_DEFEND, 100);
		// }
		set_val(PRESS_DEFEND, 100);
		if(!get_val(BTN_AUTO_DEFEND_TMP_1)) {
			defT = false
		}

		// Auto Snipe
		// if is not walking
		// Disable if fast press in interval less than 600
		if(true) {
			if(get_val(BTN_AUTO_DEFEND_TMP_1)){
				if(get_ptime(BTN_AUTO_DEFEND_TMP_1) < 600 && defT == false){
					defT2 = false;
				} else { defT2 = true; }
				if (defT == false) {
					// combo_run(snipe);
				}
			} else {
				// combo_stop(snipe);
				defIsSniping = defT2
			}
		}
	}*/
	
	// Pr1 Events
	/*isPr1ReleaseEvent = false;
	isPr1PressEvent = false;
	if(pr1LastValue == 0 && get_val(XB1_PR1) > 0) {
		isPr1PressEvent = true;
	}
	if(pr1LastValue > 0 && get_val(XB1_PR1) == 0) {
		isPr1ReleaseEvent = true;
	}
	pr1LastValue = get_val(XB1_PR1);*/
	
	// Auto run if press start while auto walking
	if (isAutoWalkingY) {
		if(event_press(GET_START) || event_press(GET_SELECT)){
			combo_run(Run);
			blockStart = true;
		}
	}

	// Auto Walk Y
	if(isAutoWalkingY) {
		if((walkDirectionY == DIR_FORWARD && isLeftAxisBackward(60)) 
			|| (walkDirectionY == DIR_BACKWARD && get_val(PS3_LY) < -60)) {
			isAutoWalkingY = false;
		} else {
			set_val(XB1_LY, 100 * walkDirectionY);
		}
	} else {
		if (isMultiPressStickAnyDirection(GET_SELECT, PS3_LY, 30)) {
			isAutoWalkingY = true;
			selectPressIgnore = true;
			walkDirectionY = getDirection(PS3_LY)
		}
	}

	/* 
	 * TODO: Tap LB -> ATACK
	 * TODO: Hold LT + Tap RT -> ATACK
	 * TODO: Hold RT + Tap LT -> ATACK
	 * TODO: 
	 * TODO: 
	 * TODO: 
	*/
	
	// HOLD RT FOR 400ms for RTHoldCombo
	/*if (event_release(GET_RT)) {
		if (blockRTPressCombo) {
			blockRTPressCombo = false;
		} else {
			// Press this key if hold for less than 400ms
			combo_run(RTPressCombo);
		}
	} else if (get_val(GET_RT) == 100) {
		// Activate if press time is greater than 400 ms
		if (get_ptime(GET_RT) > 400) {
			set_val(PRESS_SELECT, 100);
			blockRTPressCombo = true;
		}
	}*/

	// HOLD START FOR 400ms for StartHoldCombo
	if (event_release(GET_START)) {
		if (doStart) {
			doStart = false;
			// StartHoldCombo is simply Press A
			if (!blockStart) {
				onStartMenu();
				combo_run(StartHoldCombo);
			}
		} else {
			// Press this key if hold for less than 400ms
			// set_val(XB1_B, 100)
		}
		blockStart = false;
	} else if (get_val(GET_START) == 100) {
		// Activate if press time is greater than 400 ms
		if (get_ptime(GET_START) > 600) {
			doStart = true;
			toggleDirectionalAxis = TRUE;
		} else {
			// Press this key when holding for less than 400ms
			if (!blockStart) { set_val(XB1_B, 100) }
		}
	}

	// HOLD SELECT FOR 400ms for SelectHoldCombo
	if (event_release(GET_SELECT)) {
		if (doSelect) {
			doSelect = false;
			onSelectMenu();
			combo_run(SelectHoldCombo);
		} else {
			// Press this key if hold for less than 400ms
			if (!selectPressIgnore) {
				combo_run(press_a);
			}
			selectPressIgnore = false;
		}
	} else if (get_val(GET_SELECT) == 100) {
		// Activate if press time is greater than 400 ms
		if (get_ptime(GET_SELECT) > 400) {
			doSelect = true;
		} else {
			// Press this key when holding for less than 400ms
			//if (!selectPressIgnore) {
			//	set_val(XB1_A, 100)
			//}
		}
	}

	// HOLD HOME FOR 600ms for HomeHoldCombo
	if (event_release(GET_HOME)) {
		if (doHome) {
			doHome = false;
			onHomeMenu();
			combo_run(HomeHoldCombo);
		} else {
			// Press this key if hold for less than 600ms
			combo_run(HomeHoldCombo)
			onHomeMenu();
			set_val(XB1_Y, 100)
		}
	} else if (get_val(GET_HOME) == 100) {
		// Activate if press time is greater than 600ms
		if (get_ptime(GET_HOME) > 6000) {
			doHome = true;
		} else {
			// Press this key when holding for less than 600ms
			// set_val(XB1_Y, 100)
		}
	}
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1;
	} else if (get_val(stick) < 0) {
		return -1;
	}

	return 0;
}

function isLeftAxisForward(min_intensity) {
	return get_val(PS3_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(PS3_LY) >= min_intensity
}

function isLeftAxisLeft(min_intensity) {
	return get_val(PS3_LX) < -min_intensity
}

function isLeftAxisRight(min_intensity) {
	return get_val(PS3_LX) >= min_intensity
}

function onStartMenuHotkeyComboPressed() {
	doStart = false;
	doActivateRadar = false;
}

function onStartMenu() {
	isAutoWalkingY = false;
	isAutoAtacking = false;
}

function onSelectMenu() {
	isAutoWalkingY = false;
	isAutoAtacking = false;
}

function onHomeMenu() {
	isAutoWalkingY = false;
	isAutoAtacking = false;
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt);
	}

	return 0;
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return true;
	}

	return false;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return true;
	}

	return false;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return true;
	}

	return false;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && (abs(get_val(stick)) >= sensitivity)) {
		return true;
	}
	return false;
}

function toggleAutoAtackOnDoublePress(doublePressSpeed, isReleaseEvt) {
	// Reset sucessive press count if interval passes expiration window
	if(tapExpire > 0) {
		tapExpire = tapExpire - get_rtime();
		if (tapExpire <= 0) {
			taps = 0;
		}
	}
	// Increase accumulated press count
	if(!isAutoAtacking && event_press(PRESS_ATACK)) {
		taps = taps + 1;
		tapExpire = doublePressSpeed;
	}
	// If accumulated sucessive press count greater than 2
	if(!isAutoAtacking && taps >= 2) {
		isAutoAtacking = true; //make isAutoRunning_00 true if false, false if true
		t = true;
		t2 = true;
		isSniping = true;
		tapExpire = 0;
		taps = 0;
	} else {
		// Stops auto attacking if releases attack button before activating sniping mode
		if(isSniping) { combo_run(trace2) }
		if (isAutoAtacking && !isSniping && isReleaseEvt) {
			combo_stop(power_attack_r);
			combo_stop(RapidAtackCombo);
			isAutoAtacking = false;
			taps = 0;
		}
	}

	return isAutoAtacking;
}

function toggleAutoDefendOnDoublePress(doublePressSpeed, isReleaseEvt) {
	// Reset sucessive press count if interval passes expiration window
	if(defTapExpire > 0) {
		defTapExpire = defTapExpire - get_rtime();
		if (defTapExpire <= 0) {
			defTaps = 0;
		}
	}
	// Increase accumulated press count
	if(!isAutoDefending && event_press(PRESS_DEFEND)) {
		defTaps = defTaps + 1;
		defTapExpire = doublePressSpeed;
	}
	// If accumulated sucessive press count greater than 2
	if(!isAutoDefending && defTaps >= 2) {
		isAutoDefending = true; //make isAutoRunning_00 true if false, false if true
		defT = true;
		defT2 = true;
		defIsSniping = true;
		defTapExpire = 0;
		defTaps = 0;
	} else {
		// Stops auto attacking if releases attack button before activating sniping mode
		if (isAutoDefending && !defIsSniping && isReleaseEvt) {
			// combo_stop(snipe);
			isAutoDefending = false;
			defTaps = 0;
		}
	}

	return isAutoDefending;
}

function max(a, b) {
	if(a >= b) { return a; }
	return b;
}

function min(a, b) {
	if(a <= b) { return a; }
	return b;
}

function upto(startingFrom, setTo, endOn, value) {
	if (abs(value) >= abs(startingFrom) && abs(value) < abs(endOn)) {
		return setTo;
	}
	return value;
}

combo Run {
	set_val(XB1_LT, 100);
    set_val(XB1_UP, 100);
    wait(50);
}

combo StartHoldCombo {
    set_val(PRESS_START, 100);
    wait(200); 
    set_val(PRESS_START, 0);
}

combo SelectHoldCombo {
    set_val(PRESS_SELECT, 100);
    wait(200); 
    set_val(PRESS_SELECT, 0);
}

combo HomeHoldCombo {
    set_val(PRESS_HOME, 100);
    wait(200); 
    set_val(PRESS_HOME, 0);
}

combo RTPressCombo {
    set_val(PRESS_RT, 100);
    wait(100); 
    set_val(PRESS_RT, 0);
}

combo RapidAtackCombo {
 	wait(100);
    set_val(PRESS_ATACK, 100);
    set_val(XB1_X, 100);
}

combo power_attack_r {
    set_val(PRESS_ATACK, 100);
    wait(2000);
    set_val(PRESS_ATACK, 0);
}

combo press_a {
    set_val(XB1_A, 100);
    wait(30);
    set_val(XB1_A, 0);
}


combo press_b {
    set_val(XB1_B, 100);
    wait(30);
    set_val(XB1_B, 0);
}

combo press_rb {
    set_val(XB1_RB, 100);
    wait(30);
    set_val(XB1_RB, 0);
}

combo press_lb {
    set_val(XB1_LB, 100);
    wait(30);
    set_val(XB1_LB, 0);
}

combo trace {
    set_val(TRACE_2, 100);
    wait(30);
    set_val(TRACE_2, 0);
}


combo trace2 {
    set_val(TRACE_3, 100);
    wait(30);
    set_val(TRACE_3, 0);
}

