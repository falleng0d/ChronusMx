//|-------------------------------|
// Thu Apr 25 2019 12:02:29
// Script generated by GPC BLOCKLY
//|-------------------------------|

define FORWARD = -40;
define BACKWARD = 40;

define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;
define AUTO_MINE = PS3_R2;

int isAutoHarvesting, doPS, startHotkeyActivated, doDisableAim, direction, doStart, walkDirection;
int taps, tapExpire, isAutoMineJustStarted;
int isAutoWalking, isAutoMining, isAutoRunning, isDoContinueAutoMine, snipeTime;
int isHoldTorch;

remap PS3_START -> XB1_PR2;
remap XB1_PR2 -> PS3_START;

remap PS3_PS -> XB1_PR1;
remap XB1_PR1 -> PS3_PS;

init {
	isAutoHarvesting = TRUE;
	doPS = TRUE;
	direction = -1;
	doDisableAim = TRUE;
	doStart = FALSE;
	isDoContinueAutoMine = FALSE;
	snipeTime = 0;
}

main {
	if(get_val(PS3_L1)) set_val(PS3_L1, 100);
	if(get_val(PS3_L2)) set_val(PS3_L2, 100);
	if(get_val(PS3_R1)) set_val(PS3_R1, 100);
	if(get_val(PS3_R2)) set_val(PS3_R2, 100);

	if(get_val(PS3_LX) > 20) {
		set_val(PS3_LX, 100)
	} else if(get_val(PS3_LX) < -20) {
		set_val(PS3_LX, -100)
	}

	if (get_val(PS3_START) == 100 && get_ptime(PS3_START) > 300) {
		doStart = TRUE;
	}

	if (get_val(PS3_PS) == 100 && get_ptime(PS3_PS) > 300) {
		doPS = TRUE;
	}

	// Hold torch
	if(isHoldTorch) {
		set_val(PS3_R3, 100)
		if(event_press(PS3_R2)) isHoldTorch = FALSE;
	} 

	// Auto Mine
	if(toggleAutoMineOnDoublePress(200)) {
		//swap(TRACE_1, PS3_L1);
		swap(AUTO_MINE, TRACE_1);
		combo_run(auto_mine_combo);
		if(!get_val(AUTO_MINE)) { // L1 released for the first time after aim started
			isAutoMineJustStarted = FALSE;
		}

		// Auto auto_mine_combo
		if(get_val(TRACE_1) && get_ptime(TRACE_1) < 800 && isAutoMineJustStarted == FALSE){ // auto_mine_combo Button Pressed
			isDoContinueAutoMine = FALSE;
		}
	}

	// Auto Walk
	if(isAutoWalking) {
		if((walkDirection == DIR_LEFT && get_val(PS3_LX) > 60)
			|| (walkDirection == DIR_RIGHT && get_val(PS3_LX) < -60)) {
			isAutoWalking = FALSE;
		} else {
			set_val(XB1_LX, 100 * walkDirection);
		}
	} else if (isMultiPressStickAnyDirection(PS3_START, PS3_LX, 30)) {
		isAutoWalking = TRUE;
		walkDirection = getDirection(PS3_LX);
		hotkeyPressed();
	}

	if (event_release(PS3_START)) {
		if(doStart) {
			combo_run(start)
			doStart = FALSE;
		} else {
			if(!startHotkeyActivated) isHoldTorch = !isHoldTorch;
		}

		startHotkeyActivated = FALSE;
	}	

	if (event_release(PS3_PS)) {
		if (doPS) {
			combo_run(xbox);
			doPS = FALSE;
		}
	}
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1;
	} else if (get_val(stick) < 0) {
		return -1;
	}

	return 0;
}

function isLeftAxisForward(min_intensity) {
	return get_val(PS3_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(PS3_LY) >= min_intensity
}

function hotkeyPressed() {
	doStart = FALSE;
	startHotkeyActivated = TRUE;
}

function toggleAutoMineOnDoublePress(doublePressSpeed) {
	if(tapExpire > 0) {
		tapExpire = tapExpire - get_rtime();
		if (tapExpire <= 0) {
			taps = 0;
		}
	}
	if(!isAutoMining && event_press(AUTO_MINE)) {
		taps = taps + 1;
		tapExpire = doublePressSpeed;
	}
	if(!isAutoMining && taps >= 2) {
		isAutoMining = TRUE; //make isAutoRunning_00 true if false, false if true
		isAutoMineJustStarted = TRUE;
		isDoContinueAutoMine = TRUE;
		tapExpire = 0;
		taps = 0;
	} else {
		if (isAutoMining && !isDoContinueAutoMine && event_release(AUTO_MINE)) {
			combo_stop(auto_mine_combo);
			isAutoMining = FALSE;
			taps = 0;
		}
	}

	return isAutoMining;
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE;
	}

	return FALSE;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && abs(get_val(stick)) >= sensitivity) {
		return TRUE;
	}

	return FALSE;
}

combo toggle_lights {
	set_val(PS3_R3, 100);
	wait(1000);
}

combo r3 {
    set_val(PS3_R3, 100); // Press X / Square to reload
    wait(200);  // Press X / Square for 200ms
}

combo xbox {
    set_val(XB1_PR1, 100);
    wait(200); 
}

combo start {
    set_val(XB1_PR2, 100);
    wait(200); 
    set_val(XB1_PR2, 0);
}

combo l3 {
    set_val(PS3_L3, 100);
    wait(200); 
}

combo auto_mine_combo {
    set_val(AUTO_MINE, 100);
    wait(40);
    set_val(AUTO_MINE, 0);
    wait(40);
    set_val(AUTO_MINE, 100);
    wait(40);
    set_val(AUTO_MINE, 0);
}

combo RapidCircle {
    set_val(PS3_CIRCLE, 100);
    wait(40);
    set_val(PS3_CIRCLE, 0);
    wait(40);
    set_val(PS3_CIRCLE, 100);
    wait(40);
    set_val(PS3_CIRCLE, 0);
}

    //if((get_val(PS3_R1)) && (get_ptime(PS3_R1)) <= 1500) {
    //    set_val(PS3_CIRCLE, 100);
    //}
