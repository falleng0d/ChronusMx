// UTILITIES
define FORWARD = -40;
define BACKWARD = 40;
define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;
define true = TRUE;
define false = FALSE;
define L_STICK_TOLERANCE = 5;
define DEADZONE = 5;

// REMAPS
define BTN_START = PS3_CROSS;
define PRESS_SELECT = XB1_PR2;
define PRESS_START = XB1_PR1;
define PRESS_HOME = XB1_PL1;
define GET_SELECT = PS3_SELECT;
define GET_START = PS3_START;
define GET_HOME = PS3_PS;
define XB_B = PS3_CIRCLE;
define XB_A = PS3_CROSS;
define XB_X = PS3_SQUARE;
define XB_Y = PS3_TRIANGLE;
define GET_L1 = PS3_L1;
define PRESS_L1 = PS3_L1;

// AUTO AIM
define GET_AUTO_AIM = PS3_L1;
define SET_AUTO_AIM = PS3_L1;

// OTHERS
int doDisableAim;
int taps, tapExpire, isAutoAimJustStarted, isContinueAutoAimAfterReleaseSnipeButton;
int isAutoAiming, isDoContinueAutoAim, snipeTime;
int isPrepareRapidPressA;
int isRapidPressA;
int pressL1Count, pressL1CountExpire;

int walkDirectionY, isAutoWalkingY, walkDirectionX, isAutoWalkingX;
int doStart, doSelect, doHome;
int didStartAction;

int isHoldingY, isComboRelease;
int direction;

remap PS3_START -> XB1_PR1;
remap XB1_PR1 -> PS3_START;

// remap PS3_L1 -> TRACE_1;
///remap TRACE_1 -> PS3_L1;

// PRESS HOME
unmap PS3_PS;
remap PS3_PS -> PS3_START
// remap XB1_PL1 -> PS3_START;

// PRESS SELECT
remap PS3_SELECT -> XB1_PR2;
remap XB1_PR2 -> PS3_SELECT;

// remap XB1_B -> XB1_A;
// remap XB1_A -> XB1_B;

// PRESS SHARE
unmap XB1_SHARE;

init {
	direction = -1;
	doDisableAim = TRUE;
	isDoContinueAutoAim = FALSE;
	snipeTime = 0;
	isContinueAutoAimAfterReleaseSnipeButton = TRUE;
	didStartAction = FALSE;
	isRapidPressA = FALSE;
}

main {
	set_val(XB1_RX, useDeadzone(XB1_RX, DEADZONE))
	set_val(XB1_RY, useDeadzone(XB1_RY, DEADZONE))
	set_val(XB1_LX, useDeadzone(XB1_LX, DEADZONE))
	set_val(XB1_LY, useDeadzone(XB1_LY, DEADZONE))
	
    adt_off(PS5_L2);
    adt_off(PS5_R2);

	set_left_triggers_threshold(1);
    set_right_triggers_threshold(1, 1);
	
	if(get_val(XB1_SHARE)) set_val(XB1_A, 100);

	// Rapid Look Arroud
	if(get_val(PS3_LY) > L_STICK_TOLERANCE) {
		set_val(PS3_LY, get_val(PS3_LY) + 50)
	} else if(get_val(PS3_LY) < -L_STICK_TOLERANCE) {
		set_val(PS3_LY, get_val(PS3_LY) - 50)
	}
	if(get_val(PS3_LX) > L_STICK_TOLERANCE) {
		set_val(PS3_LX, get_val(PS3_LX) + 50)
	} else if(get_val(PS3_LX) < -L_STICK_TOLERANCE) {
		set_val(PS3_LX, get_val(PS3_LX) - 50)
	}
	
	if(get_val(PS3_RY) > 10) {
		set_val(PS3_RY, max(55, get_val(PS3_RY)))
	} else if(get_val(PS3_RY) < -10) {
		set_val(PS3_RY, min(-55, get_val(PS3_RY)))
	}
	if(get_val(PS3_RX) > 10) {
		set_val(PS3_RX, max(55, get_val(PS3_RX)))
	} else if(get_val(PS3_RX) < -10) {
		set_val(PS3_RX, min(-55, get_val(PS3_RX)))
	}
	
	// Defend (PRESS A) on open skill menu (LT)
	// set_val(TRACE_3, is_any_axby_pressed()); // debug
	// if(get_val(XB1_LT) > 0 && !is_any_axby_pressed()) {
	// 	set_val(XB1_X, 100);
	// }

	// Press XB1_X if XB1_LT is pressed twice in quick succession
	if(event_press(XB1_LT)) {
		if(pressL1Count == 0) {
			pressL1Count = pressL1Count + 1;
		} else if (get_ptime(XB1_LT) < 200) {
			pressL1Count = 0;
			combo_run(x);
		}
	}

	if(get_val(XB1_LT) == 0 && get_ptime(XB1_LT) > 300) {
		pressL1Count = 0;
	}

	// Rapid press A if XB1_A is pressed for more than 300ms
	if(event_press(XB1_A)) isPrepareRapidPressA = TRUE;
	if(event_release(XB1_A)) isPrepareRapidPressA = FALSE;
	
	if(isPrepareRapidPressA && get_val(XB1_A) > 0 && get_ptime(XB1_A) > 300) {
		isRapidPressA = TRUE;
	}
	if(isRapidPressA) combo_run(a);
	if(isRapidPressA && event_release(XB1_A)) isRapidPressA = FALSE;

	// Auto Aim
	if(!isAutoAiming) {
		if(event_release(GET_L1)) {
			isAutoAiming = TRUE;
			// isAutoAimJustStarted = TRUE;
			isContinueAutoAimAfterReleaseSnipeButton = TRUE;
		}
	}

	if(isAutoAiming) {
		// if (isAutoAimJustStarted == FALSE && get_ptime(GET_L1) < 250 && event_release(GET_L1)) {
		// 	isAutoAiming = FALSE;
		// }
		if(event_release(GET_L1)) {
			isAutoAiming = FALSE;
		}
		
		swap(PS3_L1, TRACE_1);
		set_val(PRESS_L1, 100);
		
		if (!get_val(TRACE_1)) {
			isAutoAimJustStarted = FALSE
		}

		// if(isAutoAimJustStarted == FALSE) {
		// 	if(get_val(TRACE_1)) {
		// 		if(get_ptime(TRACE_1) < 250) { 
		// 			isContinueAutoAimAfterReleaseSnipeButton = FALSE;
		// 		} else { 
		// 			isContinueAutoAimAfterReleaseSnipeButton = TRUE; 
		// 			set_val(PS3_R3, 100);
		// 		}
		// 		
		// 		if(isContinueAutoAimAfterReleaseSnipeButton == FALSE) {
		// 			//isAutoAiming = FALSE;
		// 		}
		// 	}
		// }
	}

	// if(toggleAutoAimOnDoublePress(200)) {
	// 	//swap(TRACE_1, PS3_L1);
	// 	//swap(GET_L1, TRACE_1);
	// 	set_val(PRESS_L1, 100);
	// 	if(get_ptime(GET_L1) < 250) { // L1 released for the first time after aim started
	// 		isAutoAimJustStarted = FALSE;
	// 	}

	// 	// Auto Snipe
	// 	if(abs(get_val(PS3_LY)) < 20) { // if is not walking
	// 		if(get_val(GET_L1)){ // Snipe Button Pressed
	// 			// set_val(PS3_R3, 100);
	// 			if(get_ptime(GET_L1) < 250 && isAutoAimJustStarted == FALSE) { 
	// 				isContinueAutoAimAfterReleaseSnipeButton = FALSE;
	// 				// combo_run(l3);
	// 			} else { 
	// 				if (isAutoAimJustStarted == FALSE) {
	// 					// combo_run(snipe);
	// 					set_val(PS3_R3, 100);
	// 				}
	// 				isContinueAutoAimAfterReleaseSnipeButton = TRUE; 
	// 			}
	// 		} else {
	// 			// combo_stop(snipe);
	// 			isDoContinueAutoAim = isContinueAutoAimAfterReleaseSnipeButton
	// 		}
	// 	}
	// }

	// Auto Run
	if (isAutoWalkingY) {
		if(event_press(GET_SELECT)){
			combo_run(l3);
		}
	}

	// Auto Walk Y
	if(isAutoWalkingY) {
		if((walkDirectionY == DIR_FORWARD && isLeftAxisBackward(60)) 
			|| (walkDirectionY == DIR_BACKWARD && get_val(PS3_LY) < -60)) {
			isAutoWalkingY = FALSE;
		} else {
			set_val(XB1_LY, 100 * walkDirectionY);
		}
	} else {
		if (isMultiPressStickAnyDirection(GET_SELECT, PS3_LY, 30)) {
			isAutoWalkingY = TRUE;
			walkDirectionY = getDirection(PS3_LY)
		}
	}


	// Toggle Lights
	// if(isMultiPress(PS3_SELECT, XB_B)) {
	// 	combo_run(r3);
	// 	doStart = FALSE;
	// 	doSelect = FALSE;
	// }

	// START HOTKEY + BUTTON
	//if (event_release(GET_START)) {
	//	if (doStart) {
	//		doStart = FALSE;
	//		// onStartMenu();
	//		combo_run(r3)
	//	} else {
	//		combo_run(a);
	//	}
	//} else if (get_val(GET_START) == 100) {
	//	if (get_ptime(GET_START) > 200) {
	//		doStart = TRUE;
	//	} else {
	//		// set_val(XB1_A, 100)
	//	}
	//}
	// if (get_val(GET_START) == 100 && get_ptime(GET_START) > 200 && !didStartAction) {
	// 	combo_run(r3);
	// 	didStartAction = TRUE;
	// } else if (event_release(GET_START)) {
	// 	if(didStartAction) {
	// 		didStartAction = FALSE;
	// 	} else {
	// 		combo_run(a);
	// 	}
	// }
	if (get_val(GET_START) == 100) {
		set_val(XB1_A, 100)
	}

	// SELECT HOTKEY + BUTTON
	if (event_release(GET_SELECT)) {
		if (doSelect) {
			doSelect = FALSE;
			onSelectMenu();
			combo_run(OpenStartMenu);
		} else if (isAutoWalkingY == FALSE && isAutoWalkingX == FALSE) {
			set_val(XB_A, 100)
		}
	} else if (get_val(GET_SELECT) == 100 && isAutoWalkingY == FALSE && isAutoWalkingX == FALSE) {
		if (get_ptime(GET_SELECT) > 400) {
		 	// doSelect = TRUE;
		 	set_val(XB_A, 100)
		} else {
			set_val(XB_A, 100)
		}
	}

	// HOME HOTKEY + BUTTON
	if (get_val(GET_HOME)) {
		set_val(PRESS_HOME, 100);
	}

	// if (event_release(GET_HOME)) {
	// 	if (doHome) {
	// 		doHome = FALSE;
	// 		onHomeMenu();
	// 		combo_run(OpenHomeMenu);
	// 	} else {
	// 		set_val(XB_X, 100)
	// 	}
	// } else if (get_val(GET_HOME) == 100) {
	// 	// if (get_ptime(GET_HOME) > 400) {
	// 	// 	doHome = TRUE;
	// 	// } else {
	// 	// 	set_val(XB_X, 100)
	// 	// }
	// }
}

function finger_trigger_left_analog(tolerance) {
    if(get_val(PS4_LY) > tolerance) {
        set_val(PS4_LY, 100)
    } else if(get_val(PS4_LY) < -tolerance) {
        set_val(PS4_LY, -100)
    }
    if(get_val(PS4_LX) > tolerance) {
        set_val(PS4_LX, 100)
    } else if(get_val(PS4_LX) < -tolerance) {
        set_val(PS4_LX, -100)
    }
}

function is_any_axby_pressed() {
	if(get_val(XB1_A) > 0 || get_val(XB1_B) > 0 || get_val(XB1_X) > 0 || get_val(XB1_Y) > 0) {
		return 100;
	}

	return 0;
}

function finger_trigger_right_analog(tolerance) {
	if(get_val(PS4_RY) > tolerance) {
		set_val(PS4_RY, 100)
	} else if(get_val(PS4_RY) < -tolerance) {
		set_val(PS4_RY, -100)
	}
	if(get_val(PS4_RX) > tolerance) {
		set_val(PS4_RX, 100)
	} else if(get_val(PS4_RX) < -tolerance) {
		set_val(PS4_RX, -100)
	}
}

function set_left_triggers_threshold(threshold) {
    if(get_val(PS4_L1) < threshold) set_val(PS4_L1, 0) else set_val(PS4_L1, 100)
	if(get_val(PS4_L2) < threshold) set_val(PS4_L2, 0) else set_val(PS4_L2, 100)
}

function set_right_triggers_threshold(threshold, threshold_small) {
    // if PS4_L2 is pressed(aiming), the threshold is smaller
    if(get_val(PS4_L2) > threshold) {
        threshold = threshold_small
    }

	if(get_val(PS4_R1) < threshold) set_val(PS4_R1, 0) else set_val(PS4_R1, 100)
	if(get_val(PS4_R2) < threshold) set_val(PS4_R2, 0) else set_val(PS4_R2, 100)
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1;
	} else if (get_val(stick) < 0) {
		return -1;
	}

	return 0;
}

function isLeftAxisForward(min_intensity) {
	return get_val(PS3_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(PS3_LY) >= min_intensity
}

function isLeftAxisLeft(min_intensity) {
	return get_val(PS3_LX) < -min_intensity
}

function isLeftAxisRight(min_intensity) {
	return get_val(PS3_LX) >= min_intensity
}

function onStartMenuHotkeyComboPressed() {
	doStart = FALSE;
	doActivateRadar = FALSE;
}

function onStartMenu() {
	isAutoWalkingY = FALSE;
	isAutoWalkingX = FALSE;
}

function onSelectMenu() {
	isAutoWalkingY = FALSE;
	isAutoWalkingX = FALSE;
}

function onHomeMenu() {
	isAutoWalkingY = FALSE;
	isAutoWalkingX = FALSE;
}

function toggleAutoAimOnDoublePress(doublePressSpeed) {
	if(!isAutoAiming && event_press(GET_L1)) {
		taps = 3;
	}
	if(!isAutoAiming && taps >= 2) {
		isAutoAiming = TRUE; //make isAutoRunning_00 true if false, false if true
		isAutoAimJustStarted = TRUE;
		isContinueAutoAimAfterReleaseSnipeButton = TRUE;
		isDoContinueAutoAim = TRUE;
		tapExpire = 0;
		taps = 0;
	// 	set_val(PRESS_L1, 0);
	} else {
		if (isAutoAiming && !isDoContinueAutoAim && event_release(GET_L1)) {
			combo_stop(snipe);
			isAutoAiming = FALSE;
			taps = 0;
			set_val(PRESS_L1, 0);
		}
	}

	return isAutoAiming;
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE;
	}

	return FALSE;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && (abs(get_val(stick)) >= sensitivity)) {
		return TRUE;
	}
	return FALSE;
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt);
	}

	return 0;
}

combo l3 {
    set_val(PS3_L3, 100);
    wait(200);
    set_val(PS3_L3, 0);
}


combo r3 {
    set_val(PS3_R3, 100);
    wait(50);
    set_val(PS3_R3, 0);
}

combo a {
    wait(50);
    set_val(XB1_A, 0);
    wait(50);
    set_val(XB1_A, 100);
}


combo x {
    set_val(XB1_X, 100);
    wait(100);
}

combo snipe {
    set_val(PS3_R3, 100);
    wait(50);
}

combo OpenStartMenu {
    set_val(PRESS_START, 100);
    wait(200); 
    set_val(PRESS_START, 0);
}

combo OpenSelectMenu {
    set_val(PRESS_SELECT, 100);
    wait(200); 
    set_val(PRESS_SELECT, 0);
}

combo OpenHomeMenu {
    set_val(PRESS_HOME, 100);
    wait(200); 
    set_val(PRESS_HOME, 0);
}