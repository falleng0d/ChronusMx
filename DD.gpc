// UTILITIES
define FORWARD = -40;
define BACKWARD = 40;
define DIR_FORWARD = -1;
define DIR_BACKWARD = 1;
define DIR_LEFT = -1;
define DIR_RIGHT = 1;
define true = TRUE;
define false = FALSE;

// REMAPS
define BTN_START = XB1_B;
define PRESS_SELECT = XB1_PR2;
define PRESS_START = XB1_PR1;
define PRESS_HOME = XB1_XBOX;
define PRESS_ATACK = XB1_LT;
define PRESS_DEFEND = XB1_LB;

define GET_RT = XB1_RT;
define GET_SELECT = XB1_VIEW;
define GET_START = XB1_MENU;
define GET_HOME = XB1_XBOX;
define GET_ATACK = XB1_LT;
define GET_DEFEND = XB1_LB;

int walkDirectionY, isAutoWalkingY, walkDirectionX, isAutoWalkingX;

// remap XB1_B -> XB1_A;
// remap XB1_A -> XB1_B;

main {
	set_val(XB1_RX, useDeadzone(XB1_RX, 15))
	set_val(XB1_RY, useDeadzone(XB1_RY, 10))
	set_val(XB1_LX, useDeadzone(XB1_LX, 22))
	set_val(XB1_LY, useDeadzone(XB1_LY, 10))
	if(get_val(PS3_L1)) set_val(PS3_L1, 100);
	if(get_val(PS3_L2)) set_val(PS3_L2, 100);
	if(get_val(PS3_R1)) set_val(PS3_R1, 100);
	if(get_val(PS3_R2)) set_val(PS3_R2, 100);

    // Rapid Look Arroud
	if(get_val(PS3_LY) > 40) {
		set_val(PS3_LY, 100)
	} else if(get_val(PS3_LY) < -40) {
		set_val(PS3_LY, -100)
	}
	if(get_val(PS3_LX) > 40) {
		set_val(PS3_LX, 100)
	} else if(get_val(PS3_LX) < -40) {
		set_val(PS3_LX, -100)
	}

	// Auto Walk Y
	if(isAutoWalkingY) {
		if((walkDirectionY == DIR_FORWARD && isLeftAxisBackward(60)) 
			|| (walkDirectionY == DIR_BACKWARD && get_val(PS3_LY) < -60)) {
			isAutoWalkingY = FALSE;
		} else {
			set_val(XB1_LY, 100 * walkDirectionY);
		}
	} else {
		if (isMultiPressStickAnyDirection(PS3_SELECT, PS3_LY, 30)) {
			isAutoWalkingY = TRUE;
			walkDirectionY = getDirection(PS3_LY)
		}
	}
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt);
	}

	return 0;
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1;
	} else if (get_val(stick) < 0) {
		return -1;
	}

	return 0;
}

function isLeftAxisForward(min_intensity) {
	return get_val(PS3_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(PS3_LY) >= min_intensity
}

function isLeftAxisLeft(min_intensity) {
	return get_val(PS3_LX) < -min_intensity
}

function isLeftAxisRight(min_intensity) {
	return get_val(PS3_LX) >= min_intensity;
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE;
	}

	return FALSE;
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE;
	}

	return FALSE;
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && (abs(get_val(stick)) >= sensitivity)) {
		return TRUE;
	}
	return FALSE;
}