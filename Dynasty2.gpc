// UTILITIES
define FORWARD = -40
define BACKWARD = 40
define DIR_FORWARD = -1
define DIR_BACKWARD = 1
define DIR_LEFT = -1
define DIR_RIGHT = 1
define true = TRUE
define false = FALSE
define MAX_RADIUS = 32767

// REMAPS
define PRESS_START = XB1_A
define PRESS_SELECT = XB1_B
define PRESS_SHARE = XB1_X
define PRESS_HOME = XB1_MENU

define GET_START = XB1_MENU
define GET_SELECT = XB1_VIEW
define GET_SHARE = XB1_SHARE
define GET_HOME = XB1_XBOX

// AUTO AIM
define GET_AUTO_AIM = XB1_LT
int taps, tapExpire, isAutoAimJustStarted, isAutoAiming, didSnipe
int pickupMode
int pressRTCount, isRapidPressRT
int pressACount, isRapidPressA

// AUTO WALK
int walkDirectionY, isAutoWalkingY, isAutoRunning

// PRESS SELECT
int skipSelectUntilRelease

// PRESS HOME
unmap XB1_XBOX

// PRESS SHARE
unmap XB1_SHARE

main {
	set_val(XB1_RX, useDeadzone(XB1_RX, 7))
	set_val(XB1_RY, useDeadzone(XB1_RY, 7))
	set_val(XB1_LX, useDeadzone(XB1_LX, 7))
	set_val(XB1_LY, useDeadzone(XB1_LY, 7))
	
	adt_off(XB1_LT)
	adt_off(XB1_RT)

	set_left_triggers_threshold(1)
	set_right_triggers_threshold(1, 1)
	
	swap(XB1_UP, XB1_LB)

	// Rapid Look Arroud
	rapid_look_around_full_l(10)

	// Auto Aim (Toggle hold aim button to aim and hold to breathe)
	toggleAutoAimOnDoublePress(200)

	// Auto Run
	if (isAutoWalkingY) {
		if(event_press(GET_SELECT)){
			combo_run(l3)
			skipSelectUntilRelease = TRUE
			isAutoRunning = TRUE
		}
	}

	// Auto Walk Y
	if(isAutoWalkingY) {
		if((walkDirectionY == DIR_FORWARD && isLeftAxisBackward(60))
			|| (walkDirectionY == DIR_BACKWARD && get_val(XB1_LY) < -60)) {
			isAutoWalkingY = FALSE
			isAutoRunning = FALSE
		} else {
			set_val(XB1_LY, 100 * walkDirectionY)
		}
	} else {
		if (isMultiPressStickAnyDirection(GET_SELECT, XB1_LY, 30)) {
			isAutoWalkingY = TRUE
			skipSelectUntilRelease = TRUE
			walkDirectionY = getDirection(XB1_LY)
		}
	}
	
	// Rapid press RT on double press RT
	if (!isRapidPressRT) {
		isRapidPressRT = isRapidDoublePressRT()
	} else if (event_press(XB1_RT)) {
		isRapidPressRT = FALSE
	}
	
	if (isRapidPressRT) combo_run(rt)

	// Rapid press A on double press A
	if (!isRapidPressA) {
		isRapidPressA = isRapidDoublePressA()
	} else if (event_press(XB1_A) || event_press(XB1_MENU)) {
		isRapidPressA = FALSE
	}
	
	if (pickupMode) {
		if (event_press(XB1_A) || event_press(XB1_MENU)) {
			pickupMode = FALSE
		} else {
			set_val(XB1_A, 100)
		}
	}
	
	if (isRapidPressA) {
		pickupMode = FALSE
		combo_run(a)
	}

	// START HOTKEY
	if (get_val(GET_START) == 100) {
		set_val(GET_START, 0)
		set_val(PRESS_START, 100)
	}

	// SELECT HOTKEY
	if (event_release(GET_SELECT)) skipSelectUntilRelease = FALSE
	if (get_val(GET_SELECT) == 100) {
		set_val(GET_SELECT, 0)
		if (!skipSelectUntilRelease) {
			set_val(PRESS_SELECT, 100)
		}
	}
	
	// HOME HOTKEY
	if (get_val(GET_HOME)) {
		set_val(XB1_VIEW, 100)
		onHomeMenu()
	}
	
	// SHARE HOTKEY
	if(event_press(GET_SHARE)) {
		pickupMode = !pickupMode
		isRapidPressA = FALSE
	}
}

// region SCRIPT SPECIFIC

function onSelectMenu() {
	isAutoWalkingY = FALSE
	isAutoRunning = FALSE
	pickupMode = FALSE
	isRapidPressRT = FALSE
	isRapidPressA = FALSE
}

function onHomeMenu() {
	onSelectMenu()
}

function isRapidDoublePressRT() {
	if(event_press(XB1_RT)) {
		if (pressRTCount == 0) {
			pressRTCount = pressRTCount + 1
		} else if (get_ptime(XB1_RT) < 200) {
			pressRTCount = 0
			return TRUE
		}
	}
	
	if(get_ival(XB1_RT) == 0 && get_ptime(XB1_RT) > 300) {
		pressRTCount = 0
	}
	
	return FALSE
}

function isRapidDoublePressA() {
    if(event_press(XB1_MENU)) {
        if (pressACount == 0) {
            pressACount = pressACount + 1
        } else if (get_ptime(XB1_MENU) < 200) {
            pressACount = 0
            return TRUE
        }
    }
    
    if(get_ival(XB1_MENU) == 0 && get_ptime(XB1_MENU) > 300) {
        pressACount = 0
    }
    
    return FALSE
}

// endregion

// region UTILITIES

function interpolate(val, inMin, inMax, outMin, outMax) {
	if (val <= inMin) return outMin
	if (val >= inMax) return outMax
	
	if (((val - inMin) * (outMax - outMin)) >= 0) {
		return outMin + (((val - inMin) * (outMax - outMin)) + ((inMax - inMin) / 2)) / (inMax - inMin)
	}
	
	return outMin + (((val - inMin) * (outMax - outMin)) - ((inMax - inMin) / 2)) / (inMax - inMin)
}

function interpolate_stick(stick_x, stick_y, deadzone, min_val, max_val) {
	if (get_val(stick_x) > deadzone) {
		set_val(stick_x, interpolate(get_val(stick_x), 1, 100, min_val, max_val))
	} else if (get_val(stick_x) < -deadzone) {
		set_val(stick_x, 0-interpolate(abs(get_val(stick_x)), 1, 100, min_val, max_val))
	}
	
	if (get_val(stick_y) > deadzone) {
		set_val(stick_y, interpolate(get_val(stick_y), 1, 100, min_val, max_val))
	} else if (get_val(stick_y) < -deadzone) {
		set_val(stick_y, 0-interpolate(abs(get_val(stick_y)), 1, 100, min_val, max_val))
	}
}

function is_analog_outside_circle(x, y, radius) {
	return (x * x + y * y) > radius * radius
}

function rapid_look_around_full_l(tolerance) {
	if (is_analog_outside_circle(get_val(XB1_LX), get_val(XB1_LY), tolerance)) {
		set_polar(POLAR_LS, 0 - get_polar(POLAR_LS, POLAR_ANGLE), MAX_RADIUS)
	}
}

function finger_trigger_left_analog(tolerance) {
	if(get_val(XB1_LY) > tolerance) {
		set_val(XB1_LY, 100)
	} else if(get_val(XB1_LY) < -tolerance) {
		set_val(XB1_LY, -100)
	}
	if(get_val(XB1_LX) > tolerance) {
		set_val(XB1_LX, 100)
	} else if(get_val(XB1_LX) < -tolerance) {
		set_val(XB1_LX, -100)
	}
}

function finger_trigger_right_analog(tolerance) {
	if(get_val(XB1_RY) > tolerance) {
		set_val(XB1_RY, 100)
	} else if(get_val(XB1_RY) < -tolerance) {
		set_val(XB1_RY, -100)
	}
	if(get_val(XB1_RX) > tolerance) {
		set_val(XB1_RX, 100)
	} else if(get_val(XB1_RX) < -tolerance) {
		set_val(XB1_RX, -100)
	}
}

function set_left_triggers_threshold(threshold) {
	if(get_val(XB1_LB) < threshold) set_val(XB1_LB, 0) else set_val(XB1_LB, 100)
	if(get_val(XB1_LT) < threshold) set_val(XB1_LT, 0) else set_val(XB1_LT, 100)
}

function set_right_triggers_threshold(threshold, threshold_small) {
	// if XB1_LT is pressed(aiming), the threshold is smaller
	if(get_val(XB1_LT) > threshold) {
		threshold = threshold_small
	}

	if(get_val(XB1_RB) < threshold) set_val(XB1_RB, 0) else set_val(XB1_RB, 100)
	if(get_val(XB1_RT) < threshold) set_val(XB1_RT, 0) else set_val(XB1_RT, 100)
}

function getDirection(stick) {
	if(get_val(stick) > 0) {
		return 1
	} else if (get_val(stick) < 0) {
		return -1
	}

	return 0
}

function isLeftAxisForward(min_intensity) {
	return get_val(XB1_LY) < -min_intensity
}

function isLeftAxisBackward(min_intensity) {
	return get_val(XB1_LY) >= min_intensity
}

function isLeftAxisLeft(min_intensity) {
	return get_val(XB1_LX) < -min_intensity
}

function isLeftAxisRight(min_intensity) {
	return get_val(XB1_LX) >= min_intensity
}

function isWalking() {
	return abs(get_val(XB1_LY)) > 20
}

function toggleAutoAimOnDoublePress(doublePressSpeed) {
	if (!isAutoAiming) {
		if (tapExpire > 0) {
			tapExpire = tapExpire - get_rtime()
			if (tapExpire <= 0) {
				taps = 0
			}
		}
		if (event_press(GET_AUTO_AIM)) {
			taps = taps + 1
			tapExpire = doublePressSpeed
		}
		// Rapid press 2 times
		if (taps >= 2) {
			isAutoAiming = TRUE //make isAutoRunning_00 true if false, false if true
			isAutoAimJustStarted = TRUE
			tapExpire = 0
			taps = 0
		}
	} else {
		set_val(GET_AUTO_AIM, 100)
	
		// Auto Snipe (aim button is now breathing button when holding)
		if (!isWalking() && !isAutoAimJustStarted) {
			// Disable auto aim if snipe button is quickly released
			if (event_release(GET_AUTO_AIM) && get_ptime(GET_AUTO_AIM) < 250) {
				combo_stop(snipe)
				isAutoAiming = FALSE
			} else if (get_ival(GET_AUTO_AIM) && get_ptime(GET_AUTO_AIM) > 250 && !didSnipe) {
				// Snipe Button is held
				combo_run(snipe)
				didSnipe = TRUE
			}
			
			if(event_release(GET_AUTO_AIM) && didSnipe) didSnipe = FALSE
		}
		
		// L1 released for the first time after aim started
		if (isAutoAimJustStarted && event_release(GET_AUTO_AIM)) {
			isAutoAimJustStarted = FALSE
		}
	}
}

function isRapidMultiPress(btA, btB) {
	if(event_press(btA) && get_ptime(btB) <= 100 ||
		event_press(btB) && get_ptime(btA) <= 100){
		return TRUE
	}

	return FALSE
}

function isMultiPress(btA, btB) {
	if((event_press(btB) && get_val(btA) > 0)
	 || (event_press(btA) && get_val(btB) > 0)) {
		return TRUE
	}

	return FALSE
}

function isMultiPressStickForward(bt, stick, sensitivity) {
	if(event_press(bt) && get_val(stick) < sensitivity) {
		return TRUE
	}

	return FALSE
}

function isMultiPressStickAnyDirection(bt, stick, sensitivity) {
	if(event_press(bt) && (abs(get_val(stick)) >= sensitivity)) {
		return TRUE
	}
	return FALSE
}

function useDeadzone(bt, deadzone) {
	if(abs(get_val(bt)) >= deadzone) {
		return get_val(bt)
	}

	return 0
}

// endregion

// Trigger run forward
combo l3 {
	set_val(XB1_LS, 100)
	wait(200)
	set_val(XB1_LS, 0)
}

combo rt {
	set_val(XB1_RT, 100)
	wait(50)
	set_val(XB1_RT, 0)
}

combo a {
    set_val(XB1_A, 100)
    wait(50)
    set_val(XB1_A, 0)
}

// Hold breath while sniping
combo snipe {
	set_val(XB1_RS, 100)
	wait(50)
}
